Grammar:

Rule 0     S' -> program
Rule 1     program -> PROG ID check_program ; gvars store_gvars functions gvars store_gvars main
Rule 2     gvars -> VAR datatype gvarids store_gtype ; gvars
Rule 3     gvars -> <empty>
Rule 4     gvarids -> ID
Rule 5     gvarids -> ID , gvarids
Rule 6     store_gvars -> <empty>
Rule 7     store_gtype -> <empty>
Rule 8     vars -> VAR datatype varids store_type ; vars
Rule 9     vars -> <empty>
Rule 10    varids -> ID darray
Rule 11    varids -> ID darray , varids
Rule 12    store_type -> <empty>
Rule 13    darray -> <empty>
Rule 14    darray -> [ INT ] twodarray
Rule 15    twodarray -> <empty>
Rule 16    twodarray -> [ INT ]
Rule 17    functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
Rule 18    functions -> <empty>
Rule 19    funcontent -> <empty>
Rule 20    funcontent -> statement funcontent
Rule 21    params -> ID : datatype , params
Rule 22    params -> ID : datatype
Rule 23    params -> <empty>
Rule 24    main -> FUNC MAIN ( ) store_funcm { vars store_mainv maincontent }
Rule 25    maincontent -> <empty>
Rule 26    maincontent -> statement maincontent
Rule 27    statement -> loop unload_pv
Rule 28    statement -> input unload_pv
Rule 29    statement -> output unload_pv
Rule 30    statement -> ifelse unload_pv
Rule 31    statement -> returns unload_pv ;
Rule 32    statement -> expr ;
Rule 33    statement -> var_assign unload_pv
Rule 34    statement -> <empty>
Rule 35    statement -> statement statement
Rule 36    var_assign -> idarray store_oper = expr ;
Rule 37    var_assign -> ID store_oper = expr ;
Rule 38    returns -> RETURN expr store_rquad
Rule 39    ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
Rule 40    ifelse -> IF ( expr ) store_gotof { statement } store_endif
Rule 41    output -> OUTPUT ( expr outex ) ;
Rule 42    outex -> <empty>
Rule 43    outex -> , expr outex
Rule 44    input -> INPUT ( ID store_oper ) ;
Rule 45    loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop
Rule 46    expr -> arexp exprx
Rule 47    exprx -> <empty>
Rule 48    exprx -> exprop arexp
Rule 49    exprop -> OR
Rule 50    exprop -> EQEQ
Rule 51    exprop -> DIFF
Rule 52    exprop -> AND
Rule 53    exprop -> <
Rule 54    exprop -> LOETHAN
Rule 55    exprop -> >
Rule 56    exprop -> GOETHAN
Rule 57    arexp -> term arexpextra
Rule 58    arexp -> term
Rule 59    arexpextra -> <empty>
Rule 60    arexpextra -> - term arexpextra  [precedence=left, level=1]
Rule 61    arexpextra -> + term arexpextra  [precedence=left, level=1]
Rule 62    term -> factor termx
Rule 63    term -> factor
Rule 64    termx -> <empty>
Rule 65    termx -> / factor termx  [precedence=left, level=2]
Rule 66    termx -> * factor termx  [precedence=left, level=2]
Rule 67    factor -> element
Rule 68    factor -> ( store_op expr ) store_op
Rule 69    element -> idarray store_oper
Rule 70    element -> callfunc store_oper
Rule 71    element -> compound store_oper
Rule 72    element -> const store_const
Rule 73    compound -> compoundx
Rule 74    compoundx -> ID store_oper
Rule 75    const -> STRING
Rule 76    const -> FLOAT
Rule 77    const -> INT
Rule 78    const -> FALSE
Rule 79    const -> TRUE
Rule 80    callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
Rule 81    callfuncpar -> <empty>
Rule 82    callfuncpar -> expr store_pquad callfuncparx
Rule 83    callfuncparx -> <empty>
Rule 84    callfuncparx -> , callfuncpar
Rule 85    idarray -> ID store_oper [ arexp ]
Rule 86    array -> <empty>
Rule 87    datatype -> VOID
Rule 88    datatype -> D_BOOL
Rule 89    datatype -> D_STRING
Rule 90    datatype -> D_FLOAT
Rule 91    datatype -> D_INT
Rule 92    check_program -> <empty>
Rule 93    store_init_quad -> <empty>
Rule 94    store_funcm -> <empty>
Rule 95    store_funcv -> <empty>
Rule 96    store_params -> <empty>
Rule 97    store_local_vars -> <empty>
Rule 98    store_mainv -> <empty>
Rule 99    store_op -> <empty>
Rule 100   store_oper -> <empty>
Rule 101   store_const -> <empty>
Rule 102   unload_pv -> <empty>
Rule 103   store_rquad -> <empty>
Rule 104   store_argquad -> <empty>
Rule 105   add_dirb -> <empty>
Rule 106   close_func -> <empty>
Rule 107   store_endif -> <empty>
Rule 108   store_pquad -> <empty>
Rule 109   ver_params -> <empty>
Rule 110   verify_func -> <empty>
Rule 111   add_fstack -> <empty>
Rule 112   end_fstack -> <empty>
Rule 113   store_gosub -> <empty>
Rule 114   store_gotof -> <empty>
Rule 115   store_jump -> <empty>
Rule 116   end_loop -> <empty>

Unused terminals:

    COMMENT

Terminals, with rules where they appear:

(                    : 17 24 39 40 41 44 45 68 80
)                    : 17 24 39 40 41 44 45 68 80
*                    : 66
+                    : 61
,                    : 5 11 21 43 84
-                    : 60
/                    : 65
:                    : 21 22
;                    : 1 2 8 31 32 36 37 41 44
<                    : 53
=                    : 36 37
>                    : 55
AND                  : 52
COMMENT              : 
DIFF                 : 51
D_BOOL               : 88
D_FLOAT              : 90
D_INT                : 91
D_STRING             : 89
ELSE                 : 39
EQEQ                 : 50
FALSE                : 78
FLOAT                : 76
FUNC                 : 17 24
GOETHAN              : 56
ID                   : 1 4 5 10 11 17 21 22 37 44 74 80 85
IF                   : 39 40
INPUT                : 44
INT                  : 14 16 77
LOETHAN              : 54
MAIN                 : 24
OR                   : 49
OUTPUT               : 41
PROG                 : 1
RETURN               : 38
STRING               : 75
TRUE                 : 79
VAR                  : 2 8
VOID                 : 87
WHILE                : 45
[                    : 14 16 85
]                    : 14 16 85
error                : 
{                    : 17 24 39 39 40 45
}                    : 17 24 39 39 40 45

Nonterminals, with rules where they appear:

add_dirb             : 
add_fstack           : 80
arexp                : 46 48 85
arexpextra           : 57 60 61
array                : 
callfunc             : 70
callfuncpar          : 80 84
callfuncparx         : 82
check_program        : 1
close_func           : 17
compound             : 71
compoundx            : 73
const                : 72
darray               : 10 11
datatype             : 2 8 17 21 22
element              : 67
end_fstack           : 80
end_loop             : 45
expr                 : 32 36 37 38 39 40 41 43 45 68 82
exprop               : 48
exprx                : 46
factor               : 62 63 65 66
funcontent           : 17 20
functions            : 1 17
gvarids              : 2 5
gvars                : 1 1 2
idarray              : 36 69
ifelse               : 30
input                : 28
loop                 : 27
main                 : 1
maincontent          : 24 26
outex                : 41 43
output               : 29
params               : 17 21
program              : 0
returns              : 31
statement            : 20 26 35 35 39 39 40 45
store_argquad        : 
store_const          : 72
store_endif          : 39 40
store_funcm          : 24
store_funcv          : 17
store_gosub          : 80
store_gotof          : 39 40 45
store_gtype          : 2
store_gvars          : 1 1
store_init_quad      : 17
store_jump           : 45
store_local_vars     : 17
store_mainv          : 24
store_op             : 68 68
store_oper           : 36 37 44 69 70 71 74 85
store_params         : 17
store_pquad          : 82
store_rquad          : 38
store_type           : 8
term                 : 57 58 60 61
termx                : 62 65 66
twodarray            : 14
unload_pv            : 27 28 29 30 31 33
var_assign           : 33
varids               : 8 11
vars                 : 8 17 24
ver_params           : 80
verify_func          : 80


state 0

    (0) S' -> . program
    (1) program -> . PROG ID check_program ; gvars store_gvars functions gvars store_gvars main
    PROG            shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> PROG . ID check_program ; gvars store_gvars functions gvars store_gvars main
    ID              shift and go to state 3


state 3

    (1) program -> PROG ID . check_program ; gvars store_gvars functions gvars store_gvars main
    (92) check_program -> .
    ;               reduce using rule 92 (check_program -> .)

    check_program                  shift and go to state 4

state 4

    (1) program -> PROG ID check_program . ; gvars store_gvars functions gvars store_gvars main
    ;               shift and go to state 5


state 5

    (1) program -> PROG ID check_program ; . gvars store_gvars functions gvars store_gvars main
    (2) gvars -> . VAR datatype gvarids store_gtype ; gvars
    (3) gvars -> .
  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 7
    VOID            reduce using rule 3 (gvars -> .)
    D_BOOL          reduce using rule 3 (gvars -> .)
    D_STRING        reduce using rule 3 (gvars -> .)
    D_FLOAT         reduce using rule 3 (gvars -> .)
    D_INT           reduce using rule 3 (gvars -> .)
    FUNC            reduce using rule 3 (gvars -> .)

    gvars                          shift and go to state 6

state 6

    (1) program -> PROG ID check_program ; gvars . store_gvars functions gvars store_gvars main
    (6) store_gvars -> .
    VOID            reduce using rule 6 (store_gvars -> .)
    D_BOOL          reduce using rule 6 (store_gvars -> .)
    D_STRING        reduce using rule 6 (store_gvars -> .)
    D_FLOAT         reduce using rule 6 (store_gvars -> .)
    D_INT           reduce using rule 6 (store_gvars -> .)
    VAR             reduce using rule 6 (store_gvars -> .)
    FUNC            reduce using rule 6 (store_gvars -> .)

    store_gvars                    shift and go to state 8

state 7

    (2) gvars -> VAR . datatype gvarids store_gtype ; gvars
    (87) datatype -> . VOID
    (88) datatype -> . D_BOOL
    (89) datatype -> . D_STRING
    (90) datatype -> . D_FLOAT
    (91) datatype -> . D_INT
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    datatype                       shift and go to state 9

state 8

    (1) program -> PROG ID check_program ; gvars store_gvars . functions gvars store_gvars main
    (17) functions -> . datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (18) functions -> .
    (87) datatype -> . VOID
    (88) datatype -> . D_BOOL
    (89) datatype -> . D_STRING
    (90) datatype -> . D_FLOAT
    (91) datatype -> . D_INT
    VAR             reduce using rule 18 (functions -> .)
    FUNC            reduce using rule 18 (functions -> .)
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    functions                      shift and go to state 15
    datatype                       shift and go to state 16

state 9

    (2) gvars -> VAR datatype . gvarids store_gtype ; gvars
    (4) gvarids -> . ID
    (5) gvarids -> . ID , gvarids
    ID              shift and go to state 18

    gvarids                        shift and go to state 17

state 10

    (87) datatype -> VOID .
    ID              reduce using rule 87 (datatype -> VOID .)
    FUNC            reduce using rule 87 (datatype -> VOID .)
    ,               reduce using rule 87 (datatype -> VOID .)
    )               reduce using rule 87 (datatype -> VOID .)


state 11

    (88) datatype -> D_BOOL .
    ID              reduce using rule 88 (datatype -> D_BOOL .)
    FUNC            reduce using rule 88 (datatype -> D_BOOL .)
    ,               reduce using rule 88 (datatype -> D_BOOL .)
    )               reduce using rule 88 (datatype -> D_BOOL .)


state 12

    (89) datatype -> D_STRING .
    ID              reduce using rule 89 (datatype -> D_STRING .)
    FUNC            reduce using rule 89 (datatype -> D_STRING .)
    ,               reduce using rule 89 (datatype -> D_STRING .)
    )               reduce using rule 89 (datatype -> D_STRING .)


state 13

    (90) datatype -> D_FLOAT .
    ID              reduce using rule 90 (datatype -> D_FLOAT .)
    FUNC            reduce using rule 90 (datatype -> D_FLOAT .)
    ,               reduce using rule 90 (datatype -> D_FLOAT .)
    )               reduce using rule 90 (datatype -> D_FLOAT .)


state 14

    (91) datatype -> D_INT .
    ID              reduce using rule 91 (datatype -> D_INT .)
    FUNC            reduce using rule 91 (datatype -> D_INT .)
    ,               reduce using rule 91 (datatype -> D_INT .)
    )               reduce using rule 91 (datatype -> D_INT .)


state 15

    (1) program -> PROG ID check_program ; gvars store_gvars functions . gvars store_gvars main
    (2) gvars -> . VAR datatype gvarids store_gtype ; gvars
    (3) gvars -> .
    VAR             shift and go to state 7
    FUNC            reduce using rule 3 (gvars -> .)

    gvars                          shift and go to state 19

state 16

    (17) functions -> datatype . FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    FUNC            shift and go to state 20


state 17

    (2) gvars -> VAR datatype gvarids . store_gtype ; gvars
    (7) store_gtype -> .
    ;               reduce using rule 7 (store_gtype -> .)

    store_gtype                    shift and go to state 21

state 18

    (4) gvarids -> ID .
    (5) gvarids -> ID . , gvarids
    ;               reduce using rule 4 (gvarids -> ID .)
    ,               shift and go to state 22


state 19

    (1) program -> PROG ID check_program ; gvars store_gvars functions gvars . store_gvars main
    (6) store_gvars -> .
    FUNC            reduce using rule 6 (store_gvars -> .)

    store_gvars                    shift and go to state 23

state 20

    (17) functions -> datatype FUNC . ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    ID              shift and go to state 24


state 21

    (2) gvars -> VAR datatype gvarids store_gtype . ; gvars
    ;               shift and go to state 25


state 22

    (5) gvarids -> ID , . gvarids
    (4) gvarids -> . ID
    (5) gvarids -> . ID , gvarids
    ID              shift and go to state 18

    gvarids                        shift and go to state 26

state 23

    (1) program -> PROG ID check_program ; gvars store_gvars functions gvars store_gvars . main
    (24) main -> . FUNC MAIN ( ) store_funcm { vars store_mainv maincontent }
    FUNC            shift and go to state 28

    main                           shift and go to state 27

state 24

    (17) functions -> datatype FUNC ID . ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (               shift and go to state 29


state 25

    (2) gvars -> VAR datatype gvarids store_gtype ; . gvars
    (2) gvars -> . VAR datatype gvarids store_gtype ; gvars
    (3) gvars -> .
  ! shift/reduce conflict for VAR resolved as shift
    VAR             shift and go to state 7
    VOID            reduce using rule 3 (gvars -> .)
    D_BOOL          reduce using rule 3 (gvars -> .)
    D_STRING        reduce using rule 3 (gvars -> .)
    D_FLOAT         reduce using rule 3 (gvars -> .)
    D_INT           reduce using rule 3 (gvars -> .)
    FUNC            reduce using rule 3 (gvars -> .)

    gvars                          shift and go to state 30

state 26

    (5) gvarids -> ID , gvarids .
    ;               reduce using rule 5 (gvarids -> ID , gvarids .)


state 27

    (1) program -> PROG ID check_program ; gvars store_gvars functions gvars store_gvars main .
    $end            reduce using rule 1 (program -> PROG ID check_program ; gvars store_gvars functions gvars store_gvars main .)


state 28

    (24) main -> FUNC . MAIN ( ) store_funcm { vars store_mainv maincontent }
    MAIN            shift and go to state 31


state 29

    (17) functions -> datatype FUNC ID ( . params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (21) params -> . ID : datatype , params
    (22) params -> . ID : datatype
    (23) params -> .
    ID              shift and go to state 32
    )               reduce using rule 23 (params -> .)

    params                         shift and go to state 33

state 30

    (2) gvars -> VAR datatype gvarids store_gtype ; gvars .
    VOID            reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    D_BOOL          reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    D_STRING        reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    D_FLOAT         reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    D_INT           reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    VAR             reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)
    FUNC            reduce using rule 2 (gvars -> VAR datatype gvarids store_gtype ; gvars .)


state 31

    (24) main -> FUNC MAIN . ( ) store_funcm { vars store_mainv maincontent }
    (               shift and go to state 34


state 32

    (21) params -> ID . : datatype , params
    (22) params -> ID . : datatype
    :               shift and go to state 35


state 33

    (17) functions -> datatype FUNC ID ( params . ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    )               shift and go to state 36


state 34

    (24) main -> FUNC MAIN ( . ) store_funcm { vars store_mainv maincontent }
    )               shift and go to state 37


state 35

    (21) params -> ID : . datatype , params
    (22) params -> ID : . datatype
    (87) datatype -> . VOID
    (88) datatype -> . D_BOOL
    (89) datatype -> . D_STRING
    (90) datatype -> . D_FLOAT
    (91) datatype -> . D_INT
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    datatype                       shift and go to state 38

state 36

    (17) functions -> datatype FUNC ID ( params ) . store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (95) store_funcv -> .
    {               reduce using rule 95 (store_funcv -> .)

    store_funcv                    shift and go to state 39

state 37

    (24) main -> FUNC MAIN ( ) . store_funcm { vars store_mainv maincontent }
    (94) store_funcm -> .
    {               reduce using rule 94 (store_funcm -> .)

    store_funcm                    shift and go to state 40

state 38

    (21) params -> ID : datatype . , params
    (22) params -> ID : datatype .
    ,               shift and go to state 41
    )               reduce using rule 22 (params -> ID : datatype .)


state 39

    (17) functions -> datatype FUNC ID ( params ) store_funcv . store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (96) store_params -> .
    {               reduce using rule 96 (store_params -> .)

    store_params                   shift and go to state 42

state 40

    (24) main -> FUNC MAIN ( ) store_funcm . { vars store_mainv maincontent }
    {               shift and go to state 43


state 41

    (21) params -> ID : datatype , . params
    (21) params -> . ID : datatype , params
    (22) params -> . ID : datatype
    (23) params -> .
    ID              shift and go to state 32
    )               reduce using rule 23 (params -> .)

    params                         shift and go to state 44

state 42

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params . store_init_quad { vars store_local_vars funcontent } close_func functions
    (93) store_init_quad -> .
    {               reduce using rule 93 (store_init_quad -> .)

    store_init_quad                shift and go to state 45

state 43

    (24) main -> FUNC MAIN ( ) store_funcm { . vars store_mainv maincontent }
    (8) vars -> . VAR datatype varids store_type ; vars
    (9) vars -> .
    VAR             shift and go to state 47
    WHILE           reduce using rule 9 (vars -> .)
    INPUT           reduce using rule 9 (vars -> .)
    OUTPUT          reduce using rule 9 (vars -> .)
    IF              reduce using rule 9 (vars -> .)
    RETURN          reduce using rule 9 (vars -> .)
    ID              reduce using rule 9 (vars -> .)
    (               reduce using rule 9 (vars -> .)
    STRING          reduce using rule 9 (vars -> .)
    FLOAT           reduce using rule 9 (vars -> .)
    INT             reduce using rule 9 (vars -> .)
    FALSE           reduce using rule 9 (vars -> .)
    TRUE            reduce using rule 9 (vars -> .)
    }               reduce using rule 9 (vars -> .)

    vars                           shift and go to state 46

state 44

    (21) params -> ID : datatype , params .
    )               reduce using rule 21 (params -> ID : datatype , params .)


state 45

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad . { vars store_local_vars funcontent } close_func functions
    {               shift and go to state 48


state 46

    (24) main -> FUNC MAIN ( ) store_funcm { vars . store_mainv maincontent }
    (98) store_mainv -> .
    WHILE           reduce using rule 98 (store_mainv -> .)
    INPUT           reduce using rule 98 (store_mainv -> .)
    OUTPUT          reduce using rule 98 (store_mainv -> .)
    IF              reduce using rule 98 (store_mainv -> .)
    RETURN          reduce using rule 98 (store_mainv -> .)
    ID              reduce using rule 98 (store_mainv -> .)
    (               reduce using rule 98 (store_mainv -> .)
    STRING          reduce using rule 98 (store_mainv -> .)
    FLOAT           reduce using rule 98 (store_mainv -> .)
    INT             reduce using rule 98 (store_mainv -> .)
    FALSE           reduce using rule 98 (store_mainv -> .)
    TRUE            reduce using rule 98 (store_mainv -> .)
    }               reduce using rule 98 (store_mainv -> .)

    store_mainv                    shift and go to state 49

state 47

    (8) vars -> VAR . datatype varids store_type ; vars
    (87) datatype -> . VOID
    (88) datatype -> . D_BOOL
    (89) datatype -> . D_STRING
    (90) datatype -> . D_FLOAT
    (91) datatype -> . D_INT
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    datatype                       shift and go to state 50

state 48

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { . vars store_local_vars funcontent } close_func functions
    (8) vars -> . VAR datatype varids store_type ; vars
    (9) vars -> .
    VAR             shift and go to state 47
    WHILE           reduce using rule 9 (vars -> .)
    INPUT           reduce using rule 9 (vars -> .)
    OUTPUT          reduce using rule 9 (vars -> .)
    IF              reduce using rule 9 (vars -> .)
    RETURN          reduce using rule 9 (vars -> .)
    ID              reduce using rule 9 (vars -> .)
    (               reduce using rule 9 (vars -> .)
    STRING          reduce using rule 9 (vars -> .)
    FLOAT           reduce using rule 9 (vars -> .)
    INT             reduce using rule 9 (vars -> .)
    FALSE           reduce using rule 9 (vars -> .)
    TRUE            reduce using rule 9 (vars -> .)
    }               reduce using rule 9 (vars -> .)

    vars                           shift and go to state 51

state 49

    (24) main -> FUNC MAIN ( ) store_funcm { vars store_mainv . maincontent }
    (25) maincontent -> .
    (26) maincontent -> . statement maincontent
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 25 (maincontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 25 (maincontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    maincontent                    shift and go to state 53
    statement                      shift and go to state 54
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 50

    (8) vars -> VAR datatype . varids store_type ; vars
    (10) varids -> . ID darray
    (11) varids -> . ID darray , varids
    ID              shift and go to state 83

    varids                         shift and go to state 82

state 51

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars . store_local_vars funcontent } close_func functions
    (97) store_local_vars -> .
    WHILE           reduce using rule 97 (store_local_vars -> .)
    INPUT           reduce using rule 97 (store_local_vars -> .)
    OUTPUT          reduce using rule 97 (store_local_vars -> .)
    IF              reduce using rule 97 (store_local_vars -> .)
    RETURN          reduce using rule 97 (store_local_vars -> .)
    ID              reduce using rule 97 (store_local_vars -> .)
    (               reduce using rule 97 (store_local_vars -> .)
    STRING          reduce using rule 97 (store_local_vars -> .)
    FLOAT           reduce using rule 97 (store_local_vars -> .)
    INT             reduce using rule 97 (store_local_vars -> .)
    FALSE           reduce using rule 97 (store_local_vars -> .)
    TRUE            reduce using rule 97 (store_local_vars -> .)
    }               reduce using rule 97 (store_local_vars -> .)

    store_local_vars               shift and go to state 84

state 52

    (68) factor -> ( . store_op expr ) store_op
    (99) store_op -> .
    (               reduce using rule 99 (store_op -> .)
    ID              reduce using rule 99 (store_op -> .)
    STRING          reduce using rule 99 (store_op -> .)
    FLOAT           reduce using rule 99 (store_op -> .)
    INT             reduce using rule 99 (store_op -> .)
    FALSE           reduce using rule 99 (store_op -> .)
    TRUE            reduce using rule 99 (store_op -> .)

    store_op                       shift and go to state 85

state 53

    (24) main -> FUNC MAIN ( ) store_funcm { vars store_mainv maincontent . }
    }               shift and go to state 86


state 54

    (26) maincontent -> statement . maincontent
    (35) statement -> statement . statement
    (25) maincontent -> .
    (26) maincontent -> . statement maincontent
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 25 (maincontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 25 (maincontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    statement                      shift and go to state 87
    maincontent                    shift and go to state 88
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 55

    (27) statement -> loop . unload_pv
    (102) unload_pv -> .
    WHILE           reduce using rule 102 (unload_pv -> .)
    INPUT           reduce using rule 102 (unload_pv -> .)
    OUTPUT          reduce using rule 102 (unload_pv -> .)
    IF              reduce using rule 102 (unload_pv -> .)
    RETURN          reduce using rule 102 (unload_pv -> .)
    ID              reduce using rule 102 (unload_pv -> .)
    (               reduce using rule 102 (unload_pv -> .)
    STRING          reduce using rule 102 (unload_pv -> .)
    FLOAT           reduce using rule 102 (unload_pv -> .)
    INT             reduce using rule 102 (unload_pv -> .)
    FALSE           reduce using rule 102 (unload_pv -> .)
    TRUE            reduce using rule 102 (unload_pv -> .)
    }               reduce using rule 102 (unload_pv -> .)

    unload_pv                      shift and go to state 89

state 56

    (28) statement -> input . unload_pv
    (102) unload_pv -> .
    WHILE           reduce using rule 102 (unload_pv -> .)
    INPUT           reduce using rule 102 (unload_pv -> .)
    OUTPUT          reduce using rule 102 (unload_pv -> .)
    IF              reduce using rule 102 (unload_pv -> .)
    RETURN          reduce using rule 102 (unload_pv -> .)
    ID              reduce using rule 102 (unload_pv -> .)
    (               reduce using rule 102 (unload_pv -> .)
    STRING          reduce using rule 102 (unload_pv -> .)
    FLOAT           reduce using rule 102 (unload_pv -> .)
    INT             reduce using rule 102 (unload_pv -> .)
    FALSE           reduce using rule 102 (unload_pv -> .)
    TRUE            reduce using rule 102 (unload_pv -> .)
    }               reduce using rule 102 (unload_pv -> .)

    unload_pv                      shift and go to state 90

state 57

    (29) statement -> output . unload_pv
    (102) unload_pv -> .
    WHILE           reduce using rule 102 (unload_pv -> .)
    INPUT           reduce using rule 102 (unload_pv -> .)
    OUTPUT          reduce using rule 102 (unload_pv -> .)
    IF              reduce using rule 102 (unload_pv -> .)
    RETURN          reduce using rule 102 (unload_pv -> .)
    ID              reduce using rule 102 (unload_pv -> .)
    (               reduce using rule 102 (unload_pv -> .)
    STRING          reduce using rule 102 (unload_pv -> .)
    FLOAT           reduce using rule 102 (unload_pv -> .)
    INT             reduce using rule 102 (unload_pv -> .)
    FALSE           reduce using rule 102 (unload_pv -> .)
    TRUE            reduce using rule 102 (unload_pv -> .)
    }               reduce using rule 102 (unload_pv -> .)

    unload_pv                      shift and go to state 91

state 58

    (30) statement -> ifelse . unload_pv
    (102) unload_pv -> .
    WHILE           reduce using rule 102 (unload_pv -> .)
    INPUT           reduce using rule 102 (unload_pv -> .)
    OUTPUT          reduce using rule 102 (unload_pv -> .)
    IF              reduce using rule 102 (unload_pv -> .)
    RETURN          reduce using rule 102 (unload_pv -> .)
    ID              reduce using rule 102 (unload_pv -> .)
    (               reduce using rule 102 (unload_pv -> .)
    STRING          reduce using rule 102 (unload_pv -> .)
    FLOAT           reduce using rule 102 (unload_pv -> .)
    INT             reduce using rule 102 (unload_pv -> .)
    FALSE           reduce using rule 102 (unload_pv -> .)
    TRUE            reduce using rule 102 (unload_pv -> .)
    }               reduce using rule 102 (unload_pv -> .)

    unload_pv                      shift and go to state 92

state 59

    (31) statement -> returns . unload_pv ;
    (102) unload_pv -> .
    ;               reduce using rule 102 (unload_pv -> .)

    unload_pv                      shift and go to state 93

state 60

    (32) statement -> expr . ;
    ;               shift and go to state 94


state 61

    (33) statement -> var_assign . unload_pv
    (102) unload_pv -> .
    WHILE           reduce using rule 102 (unload_pv -> .)
    INPUT           reduce using rule 102 (unload_pv -> .)
    OUTPUT          reduce using rule 102 (unload_pv -> .)
    IF              reduce using rule 102 (unload_pv -> .)
    RETURN          reduce using rule 102 (unload_pv -> .)
    ID              reduce using rule 102 (unload_pv -> .)
    (               reduce using rule 102 (unload_pv -> .)
    STRING          reduce using rule 102 (unload_pv -> .)
    FLOAT           reduce using rule 102 (unload_pv -> .)
    INT             reduce using rule 102 (unload_pv -> .)
    FALSE           reduce using rule 102 (unload_pv -> .)
    TRUE            reduce using rule 102 (unload_pv -> .)
    }               reduce using rule 102 (unload_pv -> .)

    unload_pv                      shift and go to state 95

state 62

    (45) loop -> WHILE . store_jump ( expr ) store_gotof { statement } end_loop
    (115) store_jump -> .
    (               reduce using rule 115 (store_jump -> .)

    store_jump                     shift and go to state 96

state 63

    (44) input -> INPUT . ( ID store_oper ) ;
    (               shift and go to state 97


state 64

    (37) var_assign -> ID . store_oper = expr ;
    (85) idarray -> ID . store_oper [ arexp ]
    (80) callfunc -> ID . verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (74) compoundx -> ID . store_oper
    (100) store_oper -> .
    (110) verify_func -> .
    =               reduce using rule 100 (store_oper -> .)
    [               reduce using rule 100 (store_oper -> .)
    /               reduce using rule 100 (store_oper -> .)
    *               reduce using rule 100 (store_oper -> .)
    -               reduce using rule 100 (store_oper -> .)
    +               reduce using rule 100 (store_oper -> .)
    OR              reduce using rule 100 (store_oper -> .)
    EQEQ            reduce using rule 100 (store_oper -> .)
    DIFF            reduce using rule 100 (store_oper -> .)
    AND             reduce using rule 100 (store_oper -> .)
    <               reduce using rule 100 (store_oper -> .)
    LOETHAN         reduce using rule 100 (store_oper -> .)
    >               reduce using rule 100 (store_oper -> .)
    GOETHAN         reduce using rule 100 (store_oper -> .)
    ;               reduce using rule 100 (store_oper -> .)
    (               reduce using rule 110 (verify_func -> .)

    store_oper                     shift and go to state 98
    verify_func                    shift and go to state 99

state 65

    (41) output -> OUTPUT . ( expr outex ) ;
    (               shift and go to state 100


state 66

    (39) ifelse -> IF . ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> IF . ( expr ) store_gotof { statement } store_endif
    (               shift and go to state 101


state 67

    (38) returns -> RETURN . expr store_rquad
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 102
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 68

    (46) expr -> arexp . exprx
    (47) exprx -> .
    (48) exprx -> . exprop arexp
    (49) exprop -> . OR
    (50) exprop -> . EQEQ
    (51) exprop -> . DIFF
    (52) exprop -> . AND
    (53) exprop -> . <
    (54) exprop -> . LOETHAN
    (55) exprop -> . >
    (56) exprop -> . GOETHAN
    ;               reduce using rule 47 (exprx -> .)
    )               reduce using rule 47 (exprx -> .)
    ,               reduce using rule 47 (exprx -> .)
    OR              shift and go to state 107
    EQEQ            shift and go to state 108
    DIFF            shift and go to state 109
    AND             shift and go to state 110
    <               shift and go to state 111
    LOETHAN         shift and go to state 112
    >               shift and go to state 113
    GOETHAN         shift and go to state 114

    exprx                          shift and go to state 105
    exprop                         shift and go to state 106

state 69

    (36) var_assign -> idarray . store_oper = expr ;
    (69) element -> idarray . store_oper
    (100) store_oper -> .
    =               reduce using rule 100 (store_oper -> .)
    /               reduce using rule 100 (store_oper -> .)
    *               reduce using rule 100 (store_oper -> .)
    -               reduce using rule 100 (store_oper -> .)
    +               reduce using rule 100 (store_oper -> .)
    OR              reduce using rule 100 (store_oper -> .)
    EQEQ            reduce using rule 100 (store_oper -> .)
    DIFF            reduce using rule 100 (store_oper -> .)
    AND             reduce using rule 100 (store_oper -> .)
    <               reduce using rule 100 (store_oper -> .)
    LOETHAN         reduce using rule 100 (store_oper -> .)
    >               reduce using rule 100 (store_oper -> .)
    GOETHAN         reduce using rule 100 (store_oper -> .)
    ;               reduce using rule 100 (store_oper -> .)

    store_oper                     shift and go to state 115

state 70

    (57) arexp -> term . arexpextra
    (58) arexp -> term .
    (59) arexpextra -> .
    (60) arexpextra -> . - term arexpextra
    (61) arexpextra -> . + term arexpextra
  ! reduce/reduce conflict for OR resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for EQEQ resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for DIFF resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for AND resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for < resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for LOETHAN resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for > resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for GOETHAN resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for ; resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for ) resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for , resolved using rule 58 (arexp -> term .)
  ! reduce/reduce conflict for ] resolved using rule 58 (arexp -> term .)
    OR              reduce using rule 58 (arexp -> term .)
    EQEQ            reduce using rule 58 (arexp -> term .)
    DIFF            reduce using rule 58 (arexp -> term .)
    AND             reduce using rule 58 (arexp -> term .)
    <               reduce using rule 58 (arexp -> term .)
    LOETHAN         reduce using rule 58 (arexp -> term .)
    >               reduce using rule 58 (arexp -> term .)
    GOETHAN         reduce using rule 58 (arexp -> term .)
    ;               reduce using rule 58 (arexp -> term .)
    )               reduce using rule 58 (arexp -> term .)
    ,               reduce using rule 58 (arexp -> term .)
    ]               reduce using rule 58 (arexp -> term .)
    -               shift and go to state 117
    +               shift and go to state 118

    arexpextra                     shift and go to state 116

state 71

    (62) term -> factor . termx
    (63) term -> factor .
    (64) termx -> .
    (65) termx -> . / factor termx
    (66) termx -> . * factor termx
  ! reduce/reduce conflict for - resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for + resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for OR resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for EQEQ resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for DIFF resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for AND resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for < resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for LOETHAN resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for > resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for GOETHAN resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for ; resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for ) resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for , resolved using rule 63 (term -> factor .)
  ! reduce/reduce conflict for ] resolved using rule 63 (term -> factor .)
    -               reduce using rule 63 (term -> factor .)
    +               reduce using rule 63 (term -> factor .)
    OR              reduce using rule 63 (term -> factor .)
    EQEQ            reduce using rule 63 (term -> factor .)
    DIFF            reduce using rule 63 (term -> factor .)
    AND             reduce using rule 63 (term -> factor .)
    <               reduce using rule 63 (term -> factor .)
    LOETHAN         reduce using rule 63 (term -> factor .)
    >               reduce using rule 63 (term -> factor .)
    GOETHAN         reduce using rule 63 (term -> factor .)
    ;               reduce using rule 63 (term -> factor .)
    )               reduce using rule 63 (term -> factor .)
    ,               reduce using rule 63 (term -> factor .)
    ]               reduce using rule 63 (term -> factor .)
    /               shift and go to state 120
    *               shift and go to state 121

    termx                          shift and go to state 119

state 72

    (67) factor -> element .
    /               reduce using rule 67 (factor -> element .)
    *               reduce using rule 67 (factor -> element .)
    -               reduce using rule 67 (factor -> element .)
    +               reduce using rule 67 (factor -> element .)
    OR              reduce using rule 67 (factor -> element .)
    EQEQ            reduce using rule 67 (factor -> element .)
    DIFF            reduce using rule 67 (factor -> element .)
    AND             reduce using rule 67 (factor -> element .)
    <               reduce using rule 67 (factor -> element .)
    LOETHAN         reduce using rule 67 (factor -> element .)
    >               reduce using rule 67 (factor -> element .)
    GOETHAN         reduce using rule 67 (factor -> element .)
    ;               reduce using rule 67 (factor -> element .)
    )               reduce using rule 67 (factor -> element .)
    ,               reduce using rule 67 (factor -> element .)
    ]               reduce using rule 67 (factor -> element .)


state 73

    (70) element -> callfunc . store_oper
    (100) store_oper -> .
    /               reduce using rule 100 (store_oper -> .)
    *               reduce using rule 100 (store_oper -> .)
    -               reduce using rule 100 (store_oper -> .)
    +               reduce using rule 100 (store_oper -> .)
    OR              reduce using rule 100 (store_oper -> .)
    EQEQ            reduce using rule 100 (store_oper -> .)
    DIFF            reduce using rule 100 (store_oper -> .)
    AND             reduce using rule 100 (store_oper -> .)
    <               reduce using rule 100 (store_oper -> .)
    LOETHAN         reduce using rule 100 (store_oper -> .)
    >               reduce using rule 100 (store_oper -> .)
    GOETHAN         reduce using rule 100 (store_oper -> .)
    ;               reduce using rule 100 (store_oper -> .)
    )               reduce using rule 100 (store_oper -> .)
    ,               reduce using rule 100 (store_oper -> .)
    ]               reduce using rule 100 (store_oper -> .)

    store_oper                     shift and go to state 122

state 74

    (71) element -> compound . store_oper
    (100) store_oper -> .
    /               reduce using rule 100 (store_oper -> .)
    *               reduce using rule 100 (store_oper -> .)
    -               reduce using rule 100 (store_oper -> .)
    +               reduce using rule 100 (store_oper -> .)
    OR              reduce using rule 100 (store_oper -> .)
    EQEQ            reduce using rule 100 (store_oper -> .)
    DIFF            reduce using rule 100 (store_oper -> .)
    AND             reduce using rule 100 (store_oper -> .)
    <               reduce using rule 100 (store_oper -> .)
    LOETHAN         reduce using rule 100 (store_oper -> .)
    >               reduce using rule 100 (store_oper -> .)
    GOETHAN         reduce using rule 100 (store_oper -> .)
    ;               reduce using rule 100 (store_oper -> .)
    )               reduce using rule 100 (store_oper -> .)
    ,               reduce using rule 100 (store_oper -> .)
    ]               reduce using rule 100 (store_oper -> .)

    store_oper                     shift and go to state 123

state 75

    (72) element -> const . store_const
    (101) store_const -> .
    /               reduce using rule 101 (store_const -> .)
    *               reduce using rule 101 (store_const -> .)
    -               reduce using rule 101 (store_const -> .)
    +               reduce using rule 101 (store_const -> .)
    OR              reduce using rule 101 (store_const -> .)
    EQEQ            reduce using rule 101 (store_const -> .)
    DIFF            reduce using rule 101 (store_const -> .)
    AND             reduce using rule 101 (store_const -> .)
    <               reduce using rule 101 (store_const -> .)
    LOETHAN         reduce using rule 101 (store_const -> .)
    >               reduce using rule 101 (store_const -> .)
    GOETHAN         reduce using rule 101 (store_const -> .)
    ;               reduce using rule 101 (store_const -> .)
    )               reduce using rule 101 (store_const -> .)
    ,               reduce using rule 101 (store_const -> .)
    ]               reduce using rule 101 (store_const -> .)

    store_const                    shift and go to state 124

state 76

    (73) compound -> compoundx .
    /               reduce using rule 73 (compound -> compoundx .)
    *               reduce using rule 73 (compound -> compoundx .)
    -               reduce using rule 73 (compound -> compoundx .)
    +               reduce using rule 73 (compound -> compoundx .)
    OR              reduce using rule 73 (compound -> compoundx .)
    EQEQ            reduce using rule 73 (compound -> compoundx .)
    DIFF            reduce using rule 73 (compound -> compoundx .)
    AND             reduce using rule 73 (compound -> compoundx .)
    <               reduce using rule 73 (compound -> compoundx .)
    LOETHAN         reduce using rule 73 (compound -> compoundx .)
    >               reduce using rule 73 (compound -> compoundx .)
    GOETHAN         reduce using rule 73 (compound -> compoundx .)
    ;               reduce using rule 73 (compound -> compoundx .)
    )               reduce using rule 73 (compound -> compoundx .)
    ,               reduce using rule 73 (compound -> compoundx .)
    ]               reduce using rule 73 (compound -> compoundx .)


state 77

    (75) const -> STRING .
    /               reduce using rule 75 (const -> STRING .)
    *               reduce using rule 75 (const -> STRING .)
    -               reduce using rule 75 (const -> STRING .)
    +               reduce using rule 75 (const -> STRING .)
    OR              reduce using rule 75 (const -> STRING .)
    EQEQ            reduce using rule 75 (const -> STRING .)
    DIFF            reduce using rule 75 (const -> STRING .)
    AND             reduce using rule 75 (const -> STRING .)
    <               reduce using rule 75 (const -> STRING .)
    LOETHAN         reduce using rule 75 (const -> STRING .)
    >               reduce using rule 75 (const -> STRING .)
    GOETHAN         reduce using rule 75 (const -> STRING .)
    ;               reduce using rule 75 (const -> STRING .)
    )               reduce using rule 75 (const -> STRING .)
    ,               reduce using rule 75 (const -> STRING .)
    ]               reduce using rule 75 (const -> STRING .)


state 78

    (76) const -> FLOAT .
    /               reduce using rule 76 (const -> FLOAT .)
    *               reduce using rule 76 (const -> FLOAT .)
    -               reduce using rule 76 (const -> FLOAT .)
    +               reduce using rule 76 (const -> FLOAT .)
    OR              reduce using rule 76 (const -> FLOAT .)
    EQEQ            reduce using rule 76 (const -> FLOAT .)
    DIFF            reduce using rule 76 (const -> FLOAT .)
    AND             reduce using rule 76 (const -> FLOAT .)
    <               reduce using rule 76 (const -> FLOAT .)
    LOETHAN         reduce using rule 76 (const -> FLOAT .)
    >               reduce using rule 76 (const -> FLOAT .)
    GOETHAN         reduce using rule 76 (const -> FLOAT .)
    ;               reduce using rule 76 (const -> FLOAT .)
    )               reduce using rule 76 (const -> FLOAT .)
    ,               reduce using rule 76 (const -> FLOAT .)
    ]               reduce using rule 76 (const -> FLOAT .)


state 79

    (77) const -> INT .
    /               reduce using rule 77 (const -> INT .)
    *               reduce using rule 77 (const -> INT .)
    -               reduce using rule 77 (const -> INT .)
    +               reduce using rule 77 (const -> INT .)
    OR              reduce using rule 77 (const -> INT .)
    EQEQ            reduce using rule 77 (const -> INT .)
    DIFF            reduce using rule 77 (const -> INT .)
    AND             reduce using rule 77 (const -> INT .)
    <               reduce using rule 77 (const -> INT .)
    LOETHAN         reduce using rule 77 (const -> INT .)
    >               reduce using rule 77 (const -> INT .)
    GOETHAN         reduce using rule 77 (const -> INT .)
    ;               reduce using rule 77 (const -> INT .)
    )               reduce using rule 77 (const -> INT .)
    ,               reduce using rule 77 (const -> INT .)
    ]               reduce using rule 77 (const -> INT .)


state 80

    (78) const -> FALSE .
    /               reduce using rule 78 (const -> FALSE .)
    *               reduce using rule 78 (const -> FALSE .)
    -               reduce using rule 78 (const -> FALSE .)
    +               reduce using rule 78 (const -> FALSE .)
    OR              reduce using rule 78 (const -> FALSE .)
    EQEQ            reduce using rule 78 (const -> FALSE .)
    DIFF            reduce using rule 78 (const -> FALSE .)
    AND             reduce using rule 78 (const -> FALSE .)
    <               reduce using rule 78 (const -> FALSE .)
    LOETHAN         reduce using rule 78 (const -> FALSE .)
    >               reduce using rule 78 (const -> FALSE .)
    GOETHAN         reduce using rule 78 (const -> FALSE .)
    ;               reduce using rule 78 (const -> FALSE .)
    )               reduce using rule 78 (const -> FALSE .)
    ,               reduce using rule 78 (const -> FALSE .)
    ]               reduce using rule 78 (const -> FALSE .)


state 81

    (79) const -> TRUE .
    /               reduce using rule 79 (const -> TRUE .)
    *               reduce using rule 79 (const -> TRUE .)
    -               reduce using rule 79 (const -> TRUE .)
    +               reduce using rule 79 (const -> TRUE .)
    OR              reduce using rule 79 (const -> TRUE .)
    EQEQ            reduce using rule 79 (const -> TRUE .)
    DIFF            reduce using rule 79 (const -> TRUE .)
    AND             reduce using rule 79 (const -> TRUE .)
    <               reduce using rule 79 (const -> TRUE .)
    LOETHAN         reduce using rule 79 (const -> TRUE .)
    >               reduce using rule 79 (const -> TRUE .)
    GOETHAN         reduce using rule 79 (const -> TRUE .)
    ;               reduce using rule 79 (const -> TRUE .)
    )               reduce using rule 79 (const -> TRUE .)
    ,               reduce using rule 79 (const -> TRUE .)
    ]               reduce using rule 79 (const -> TRUE .)


state 82

    (8) vars -> VAR datatype varids . store_type ; vars
    (12) store_type -> .
    ;               reduce using rule 12 (store_type -> .)

    store_type                     shift and go to state 125

state 83

    (10) varids -> ID . darray
    (11) varids -> ID . darray , varids
    (13) darray -> .
    (14) darray -> . [ INT ] twodarray
    ,               reduce using rule 13 (darray -> .)
    ;               reduce using rule 13 (darray -> .)
    [               shift and go to state 127

    darray                         shift and go to state 126

state 84

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars . funcontent } close_func functions
    (19) funcontent -> .
    (20) funcontent -> . statement funcontent
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 19 (funcontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 19 (funcontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    funcontent                     shift and go to state 128
    statement                      shift and go to state 129
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 85

    (68) factor -> ( store_op . expr ) store_op
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 130
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 86

    (24) main -> FUNC MAIN ( ) store_funcm { vars store_mainv maincontent } .
    $end            reduce using rule 24 (main -> FUNC MAIN ( ) store_funcm { vars store_mainv maincontent } .)


state 87

    (35) statement -> statement statement .
    (26) maincontent -> statement . maincontent
    (35) statement -> statement . statement
    (25) maincontent -> .
    (26) maincontent -> . statement maincontent
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 25 (maincontent -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for INPUT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for ( resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for STRING resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for INT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for } resolved using rule 25 (maincontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 25 (maincontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    statement                      shift and go to state 87
    maincontent                    shift and go to state 88
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 88

    (26) maincontent -> statement maincontent .
    }               reduce using rule 26 (maincontent -> statement maincontent .)


state 89

    (27) statement -> loop unload_pv .
    WHILE           reduce using rule 27 (statement -> loop unload_pv .)
    INPUT           reduce using rule 27 (statement -> loop unload_pv .)
    OUTPUT          reduce using rule 27 (statement -> loop unload_pv .)
    IF              reduce using rule 27 (statement -> loop unload_pv .)
    RETURN          reduce using rule 27 (statement -> loop unload_pv .)
    ID              reduce using rule 27 (statement -> loop unload_pv .)
    (               reduce using rule 27 (statement -> loop unload_pv .)
    STRING          reduce using rule 27 (statement -> loop unload_pv .)
    FLOAT           reduce using rule 27 (statement -> loop unload_pv .)
    INT             reduce using rule 27 (statement -> loop unload_pv .)
    FALSE           reduce using rule 27 (statement -> loop unload_pv .)
    TRUE            reduce using rule 27 (statement -> loop unload_pv .)
    }               reduce using rule 27 (statement -> loop unload_pv .)


state 90

    (28) statement -> input unload_pv .
    WHILE           reduce using rule 28 (statement -> input unload_pv .)
    INPUT           reduce using rule 28 (statement -> input unload_pv .)
    OUTPUT          reduce using rule 28 (statement -> input unload_pv .)
    IF              reduce using rule 28 (statement -> input unload_pv .)
    RETURN          reduce using rule 28 (statement -> input unload_pv .)
    ID              reduce using rule 28 (statement -> input unload_pv .)
    (               reduce using rule 28 (statement -> input unload_pv .)
    STRING          reduce using rule 28 (statement -> input unload_pv .)
    FLOAT           reduce using rule 28 (statement -> input unload_pv .)
    INT             reduce using rule 28 (statement -> input unload_pv .)
    FALSE           reduce using rule 28 (statement -> input unload_pv .)
    TRUE            reduce using rule 28 (statement -> input unload_pv .)
    }               reduce using rule 28 (statement -> input unload_pv .)


state 91

    (29) statement -> output unload_pv .
    WHILE           reduce using rule 29 (statement -> output unload_pv .)
    INPUT           reduce using rule 29 (statement -> output unload_pv .)
    OUTPUT          reduce using rule 29 (statement -> output unload_pv .)
    IF              reduce using rule 29 (statement -> output unload_pv .)
    RETURN          reduce using rule 29 (statement -> output unload_pv .)
    ID              reduce using rule 29 (statement -> output unload_pv .)
    (               reduce using rule 29 (statement -> output unload_pv .)
    STRING          reduce using rule 29 (statement -> output unload_pv .)
    FLOAT           reduce using rule 29 (statement -> output unload_pv .)
    INT             reduce using rule 29 (statement -> output unload_pv .)
    FALSE           reduce using rule 29 (statement -> output unload_pv .)
    TRUE            reduce using rule 29 (statement -> output unload_pv .)
    }               reduce using rule 29 (statement -> output unload_pv .)


state 92

    (30) statement -> ifelse unload_pv .
    WHILE           reduce using rule 30 (statement -> ifelse unload_pv .)
    INPUT           reduce using rule 30 (statement -> ifelse unload_pv .)
    OUTPUT          reduce using rule 30 (statement -> ifelse unload_pv .)
    IF              reduce using rule 30 (statement -> ifelse unload_pv .)
    RETURN          reduce using rule 30 (statement -> ifelse unload_pv .)
    ID              reduce using rule 30 (statement -> ifelse unload_pv .)
    (               reduce using rule 30 (statement -> ifelse unload_pv .)
    STRING          reduce using rule 30 (statement -> ifelse unload_pv .)
    FLOAT           reduce using rule 30 (statement -> ifelse unload_pv .)
    INT             reduce using rule 30 (statement -> ifelse unload_pv .)
    FALSE           reduce using rule 30 (statement -> ifelse unload_pv .)
    TRUE            reduce using rule 30 (statement -> ifelse unload_pv .)
    }               reduce using rule 30 (statement -> ifelse unload_pv .)


state 93

    (31) statement -> returns unload_pv . ;
    ;               shift and go to state 131


state 94

    (32) statement -> expr ; .
    WHILE           reduce using rule 32 (statement -> expr ; .)
    INPUT           reduce using rule 32 (statement -> expr ; .)
    OUTPUT          reduce using rule 32 (statement -> expr ; .)
    IF              reduce using rule 32 (statement -> expr ; .)
    RETURN          reduce using rule 32 (statement -> expr ; .)
    ID              reduce using rule 32 (statement -> expr ; .)
    (               reduce using rule 32 (statement -> expr ; .)
    STRING          reduce using rule 32 (statement -> expr ; .)
    FLOAT           reduce using rule 32 (statement -> expr ; .)
    INT             reduce using rule 32 (statement -> expr ; .)
    FALSE           reduce using rule 32 (statement -> expr ; .)
    TRUE            reduce using rule 32 (statement -> expr ; .)
    }               reduce using rule 32 (statement -> expr ; .)


state 95

    (33) statement -> var_assign unload_pv .
    WHILE           reduce using rule 33 (statement -> var_assign unload_pv .)
    INPUT           reduce using rule 33 (statement -> var_assign unload_pv .)
    OUTPUT          reduce using rule 33 (statement -> var_assign unload_pv .)
    IF              reduce using rule 33 (statement -> var_assign unload_pv .)
    RETURN          reduce using rule 33 (statement -> var_assign unload_pv .)
    ID              reduce using rule 33 (statement -> var_assign unload_pv .)
    (               reduce using rule 33 (statement -> var_assign unload_pv .)
    STRING          reduce using rule 33 (statement -> var_assign unload_pv .)
    FLOAT           reduce using rule 33 (statement -> var_assign unload_pv .)
    INT             reduce using rule 33 (statement -> var_assign unload_pv .)
    FALSE           reduce using rule 33 (statement -> var_assign unload_pv .)
    TRUE            reduce using rule 33 (statement -> var_assign unload_pv .)
    }               reduce using rule 33 (statement -> var_assign unload_pv .)


state 96

    (45) loop -> WHILE store_jump . ( expr ) store_gotof { statement } end_loop
    (               shift and go to state 132


state 97

    (44) input -> INPUT ( . ID store_oper ) ;
    ID              shift and go to state 133


state 98

    (37) var_assign -> ID store_oper . = expr ;
    (85) idarray -> ID store_oper . [ arexp ]
    (74) compoundx -> ID store_oper .
    =               shift and go to state 134
    [               shift and go to state 135
    /               reduce using rule 74 (compoundx -> ID store_oper .)
    *               reduce using rule 74 (compoundx -> ID store_oper .)
    -               reduce using rule 74 (compoundx -> ID store_oper .)
    +               reduce using rule 74 (compoundx -> ID store_oper .)
    OR              reduce using rule 74 (compoundx -> ID store_oper .)
    EQEQ            reduce using rule 74 (compoundx -> ID store_oper .)
    DIFF            reduce using rule 74 (compoundx -> ID store_oper .)
    AND             reduce using rule 74 (compoundx -> ID store_oper .)
    <               reduce using rule 74 (compoundx -> ID store_oper .)
    LOETHAN         reduce using rule 74 (compoundx -> ID store_oper .)
    >               reduce using rule 74 (compoundx -> ID store_oper .)
    GOETHAN         reduce using rule 74 (compoundx -> ID store_oper .)
    ;               reduce using rule 74 (compoundx -> ID store_oper .)


state 99

    (80) callfunc -> ID verify_func . add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (111) add_fstack -> .
    (               reduce using rule 111 (add_fstack -> .)

    add_fstack                     shift and go to state 136

state 100

    (41) output -> OUTPUT ( . expr outex ) ;
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 137
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 101

    (39) ifelse -> IF ( . expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> IF ( . expr ) store_gotof { statement } store_endif
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 138
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 102

    (38) returns -> RETURN expr . store_rquad
    (103) store_rquad -> .
    ;               reduce using rule 103 (store_rquad -> .)

    store_rquad                    shift and go to state 139

state 103

    (69) element -> idarray . store_oper
    (100) store_oper -> .
    /               reduce using rule 100 (store_oper -> .)
    *               reduce using rule 100 (store_oper -> .)
    -               reduce using rule 100 (store_oper -> .)
    +               reduce using rule 100 (store_oper -> .)
    OR              reduce using rule 100 (store_oper -> .)
    EQEQ            reduce using rule 100 (store_oper -> .)
    DIFF            reduce using rule 100 (store_oper -> .)
    AND             reduce using rule 100 (store_oper -> .)
    <               reduce using rule 100 (store_oper -> .)
    LOETHAN         reduce using rule 100 (store_oper -> .)
    >               reduce using rule 100 (store_oper -> .)
    GOETHAN         reduce using rule 100 (store_oper -> .)
    ;               reduce using rule 100 (store_oper -> .)
    )               reduce using rule 100 (store_oper -> .)
    ,               reduce using rule 100 (store_oper -> .)
    ]               reduce using rule 100 (store_oper -> .)

    store_oper                     shift and go to state 140

state 104

    (85) idarray -> ID . store_oper [ arexp ]
    (80) callfunc -> ID . verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (74) compoundx -> ID . store_oper
    (100) store_oper -> .
    (110) verify_func -> .
    [               reduce using rule 100 (store_oper -> .)
    /               reduce using rule 100 (store_oper -> .)
    *               reduce using rule 100 (store_oper -> .)
    -               reduce using rule 100 (store_oper -> .)
    +               reduce using rule 100 (store_oper -> .)
    OR              reduce using rule 100 (store_oper -> .)
    EQEQ            reduce using rule 100 (store_oper -> .)
    DIFF            reduce using rule 100 (store_oper -> .)
    AND             reduce using rule 100 (store_oper -> .)
    <               reduce using rule 100 (store_oper -> .)
    LOETHAN         reduce using rule 100 (store_oper -> .)
    >               reduce using rule 100 (store_oper -> .)
    GOETHAN         reduce using rule 100 (store_oper -> .)
    ;               reduce using rule 100 (store_oper -> .)
    )               reduce using rule 100 (store_oper -> .)
    ,               reduce using rule 100 (store_oper -> .)
    ]               reduce using rule 100 (store_oper -> .)
    (               reduce using rule 110 (verify_func -> .)

    store_oper                     shift and go to state 141
    verify_func                    shift and go to state 99

state 105

    (46) expr -> arexp exprx .
    ;               reduce using rule 46 (expr -> arexp exprx .)
    )               reduce using rule 46 (expr -> arexp exprx .)
    ,               reduce using rule 46 (expr -> arexp exprx .)


state 106

    (48) exprx -> exprop . arexp
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    arexp                          shift and go to state 142
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 107

    (49) exprop -> OR .
    (               reduce using rule 49 (exprop -> OR .)
    ID              reduce using rule 49 (exprop -> OR .)
    STRING          reduce using rule 49 (exprop -> OR .)
    FLOAT           reduce using rule 49 (exprop -> OR .)
    INT             reduce using rule 49 (exprop -> OR .)
    FALSE           reduce using rule 49 (exprop -> OR .)
    TRUE            reduce using rule 49 (exprop -> OR .)


state 108

    (50) exprop -> EQEQ .
    (               reduce using rule 50 (exprop -> EQEQ .)
    ID              reduce using rule 50 (exprop -> EQEQ .)
    STRING          reduce using rule 50 (exprop -> EQEQ .)
    FLOAT           reduce using rule 50 (exprop -> EQEQ .)
    INT             reduce using rule 50 (exprop -> EQEQ .)
    FALSE           reduce using rule 50 (exprop -> EQEQ .)
    TRUE            reduce using rule 50 (exprop -> EQEQ .)


state 109

    (51) exprop -> DIFF .
    (               reduce using rule 51 (exprop -> DIFF .)
    ID              reduce using rule 51 (exprop -> DIFF .)
    STRING          reduce using rule 51 (exprop -> DIFF .)
    FLOAT           reduce using rule 51 (exprop -> DIFF .)
    INT             reduce using rule 51 (exprop -> DIFF .)
    FALSE           reduce using rule 51 (exprop -> DIFF .)
    TRUE            reduce using rule 51 (exprop -> DIFF .)


state 110

    (52) exprop -> AND .
    (               reduce using rule 52 (exprop -> AND .)
    ID              reduce using rule 52 (exprop -> AND .)
    STRING          reduce using rule 52 (exprop -> AND .)
    FLOAT           reduce using rule 52 (exprop -> AND .)
    INT             reduce using rule 52 (exprop -> AND .)
    FALSE           reduce using rule 52 (exprop -> AND .)
    TRUE            reduce using rule 52 (exprop -> AND .)


state 111

    (53) exprop -> < .
    (               reduce using rule 53 (exprop -> < .)
    ID              reduce using rule 53 (exprop -> < .)
    STRING          reduce using rule 53 (exprop -> < .)
    FLOAT           reduce using rule 53 (exprop -> < .)
    INT             reduce using rule 53 (exprop -> < .)
    FALSE           reduce using rule 53 (exprop -> < .)
    TRUE            reduce using rule 53 (exprop -> < .)


state 112

    (54) exprop -> LOETHAN .
    (               reduce using rule 54 (exprop -> LOETHAN .)
    ID              reduce using rule 54 (exprop -> LOETHAN .)
    STRING          reduce using rule 54 (exprop -> LOETHAN .)
    FLOAT           reduce using rule 54 (exprop -> LOETHAN .)
    INT             reduce using rule 54 (exprop -> LOETHAN .)
    FALSE           reduce using rule 54 (exprop -> LOETHAN .)
    TRUE            reduce using rule 54 (exprop -> LOETHAN .)


state 113

    (55) exprop -> > .
    (               reduce using rule 55 (exprop -> > .)
    ID              reduce using rule 55 (exprop -> > .)
    STRING          reduce using rule 55 (exprop -> > .)
    FLOAT           reduce using rule 55 (exprop -> > .)
    INT             reduce using rule 55 (exprop -> > .)
    FALSE           reduce using rule 55 (exprop -> > .)
    TRUE            reduce using rule 55 (exprop -> > .)


state 114

    (56) exprop -> GOETHAN .
    (               reduce using rule 56 (exprop -> GOETHAN .)
    ID              reduce using rule 56 (exprop -> GOETHAN .)
    STRING          reduce using rule 56 (exprop -> GOETHAN .)
    FLOAT           reduce using rule 56 (exprop -> GOETHAN .)
    INT             reduce using rule 56 (exprop -> GOETHAN .)
    FALSE           reduce using rule 56 (exprop -> GOETHAN .)
    TRUE            reduce using rule 56 (exprop -> GOETHAN .)


state 115

    (36) var_assign -> idarray store_oper . = expr ;
    (69) element -> idarray store_oper .
    =               shift and go to state 143
    /               reduce using rule 69 (element -> idarray store_oper .)
    *               reduce using rule 69 (element -> idarray store_oper .)
    -               reduce using rule 69 (element -> idarray store_oper .)
    +               reduce using rule 69 (element -> idarray store_oper .)
    OR              reduce using rule 69 (element -> idarray store_oper .)
    EQEQ            reduce using rule 69 (element -> idarray store_oper .)
    DIFF            reduce using rule 69 (element -> idarray store_oper .)
    AND             reduce using rule 69 (element -> idarray store_oper .)
    <               reduce using rule 69 (element -> idarray store_oper .)
    LOETHAN         reduce using rule 69 (element -> idarray store_oper .)
    >               reduce using rule 69 (element -> idarray store_oper .)
    GOETHAN         reduce using rule 69 (element -> idarray store_oper .)
    ;               reduce using rule 69 (element -> idarray store_oper .)


state 116

    (57) arexp -> term arexpextra .
    OR              reduce using rule 57 (arexp -> term arexpextra .)
    EQEQ            reduce using rule 57 (arexp -> term arexpextra .)
    DIFF            reduce using rule 57 (arexp -> term arexpextra .)
    AND             reduce using rule 57 (arexp -> term arexpextra .)
    <               reduce using rule 57 (arexp -> term arexpextra .)
    LOETHAN         reduce using rule 57 (arexp -> term arexpextra .)
    >               reduce using rule 57 (arexp -> term arexpextra .)
    GOETHAN         reduce using rule 57 (arexp -> term arexpextra .)
    ;               reduce using rule 57 (arexp -> term arexpextra .)
    )               reduce using rule 57 (arexp -> term arexpextra .)
    ,               reduce using rule 57 (arexp -> term arexpextra .)
    ]               reduce using rule 57 (arexp -> term arexpextra .)


state 117

    (60) arexpextra -> - . term arexpextra
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    term                           shift and go to state 144
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 118

    (61) arexpextra -> + . term arexpextra
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    term                           shift and go to state 145
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 119

    (62) term -> factor termx .
    -               reduce using rule 62 (term -> factor termx .)
    +               reduce using rule 62 (term -> factor termx .)
    OR              reduce using rule 62 (term -> factor termx .)
    EQEQ            reduce using rule 62 (term -> factor termx .)
    DIFF            reduce using rule 62 (term -> factor termx .)
    AND             reduce using rule 62 (term -> factor termx .)
    <               reduce using rule 62 (term -> factor termx .)
    LOETHAN         reduce using rule 62 (term -> factor termx .)
    >               reduce using rule 62 (term -> factor termx .)
    GOETHAN         reduce using rule 62 (term -> factor termx .)
    ;               reduce using rule 62 (term -> factor termx .)
    )               reduce using rule 62 (term -> factor termx .)
    ,               reduce using rule 62 (term -> factor termx .)
    ]               reduce using rule 62 (term -> factor termx .)


state 120

    (65) termx -> / . factor termx
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    factor                         shift and go to state 146
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 121

    (66) termx -> * . factor termx
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    factor                         shift and go to state 147
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 122

    (70) element -> callfunc store_oper .
    /               reduce using rule 70 (element -> callfunc store_oper .)
    *               reduce using rule 70 (element -> callfunc store_oper .)
    -               reduce using rule 70 (element -> callfunc store_oper .)
    +               reduce using rule 70 (element -> callfunc store_oper .)
    OR              reduce using rule 70 (element -> callfunc store_oper .)
    EQEQ            reduce using rule 70 (element -> callfunc store_oper .)
    DIFF            reduce using rule 70 (element -> callfunc store_oper .)
    AND             reduce using rule 70 (element -> callfunc store_oper .)
    <               reduce using rule 70 (element -> callfunc store_oper .)
    LOETHAN         reduce using rule 70 (element -> callfunc store_oper .)
    >               reduce using rule 70 (element -> callfunc store_oper .)
    GOETHAN         reduce using rule 70 (element -> callfunc store_oper .)
    ;               reduce using rule 70 (element -> callfunc store_oper .)
    )               reduce using rule 70 (element -> callfunc store_oper .)
    ,               reduce using rule 70 (element -> callfunc store_oper .)
    ]               reduce using rule 70 (element -> callfunc store_oper .)


state 123

    (71) element -> compound store_oper .
    /               reduce using rule 71 (element -> compound store_oper .)
    *               reduce using rule 71 (element -> compound store_oper .)
    -               reduce using rule 71 (element -> compound store_oper .)
    +               reduce using rule 71 (element -> compound store_oper .)
    OR              reduce using rule 71 (element -> compound store_oper .)
    EQEQ            reduce using rule 71 (element -> compound store_oper .)
    DIFF            reduce using rule 71 (element -> compound store_oper .)
    AND             reduce using rule 71 (element -> compound store_oper .)
    <               reduce using rule 71 (element -> compound store_oper .)
    LOETHAN         reduce using rule 71 (element -> compound store_oper .)
    >               reduce using rule 71 (element -> compound store_oper .)
    GOETHAN         reduce using rule 71 (element -> compound store_oper .)
    ;               reduce using rule 71 (element -> compound store_oper .)
    )               reduce using rule 71 (element -> compound store_oper .)
    ,               reduce using rule 71 (element -> compound store_oper .)
    ]               reduce using rule 71 (element -> compound store_oper .)


state 124

    (72) element -> const store_const .
    /               reduce using rule 72 (element -> const store_const .)
    *               reduce using rule 72 (element -> const store_const .)
    -               reduce using rule 72 (element -> const store_const .)
    +               reduce using rule 72 (element -> const store_const .)
    OR              reduce using rule 72 (element -> const store_const .)
    EQEQ            reduce using rule 72 (element -> const store_const .)
    DIFF            reduce using rule 72 (element -> const store_const .)
    AND             reduce using rule 72 (element -> const store_const .)
    <               reduce using rule 72 (element -> const store_const .)
    LOETHAN         reduce using rule 72 (element -> const store_const .)
    >               reduce using rule 72 (element -> const store_const .)
    GOETHAN         reduce using rule 72 (element -> const store_const .)
    ;               reduce using rule 72 (element -> const store_const .)
    )               reduce using rule 72 (element -> const store_const .)
    ,               reduce using rule 72 (element -> const store_const .)
    ]               reduce using rule 72 (element -> const store_const .)


state 125

    (8) vars -> VAR datatype varids store_type . ; vars
    ;               shift and go to state 148


state 126

    (10) varids -> ID darray .
    (11) varids -> ID darray . , varids
    ;               reduce using rule 10 (varids -> ID darray .)
    ,               shift and go to state 149


state 127

    (14) darray -> [ . INT ] twodarray
    INT             shift and go to state 150


state 128

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent . } close_func functions
    }               shift and go to state 151


state 129

    (20) funcontent -> statement . funcontent
    (35) statement -> statement . statement
    (19) funcontent -> .
    (20) funcontent -> . statement funcontent
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 19 (funcontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 19 (funcontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    statement                      shift and go to state 152
    funcontent                     shift and go to state 153
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 130

    (68) factor -> ( store_op expr . ) store_op
    )               shift and go to state 154


state 131

    (31) statement -> returns unload_pv ; .
    WHILE           reduce using rule 31 (statement -> returns unload_pv ; .)
    INPUT           reduce using rule 31 (statement -> returns unload_pv ; .)
    OUTPUT          reduce using rule 31 (statement -> returns unload_pv ; .)
    IF              reduce using rule 31 (statement -> returns unload_pv ; .)
    RETURN          reduce using rule 31 (statement -> returns unload_pv ; .)
    ID              reduce using rule 31 (statement -> returns unload_pv ; .)
    (               reduce using rule 31 (statement -> returns unload_pv ; .)
    STRING          reduce using rule 31 (statement -> returns unload_pv ; .)
    FLOAT           reduce using rule 31 (statement -> returns unload_pv ; .)
    INT             reduce using rule 31 (statement -> returns unload_pv ; .)
    FALSE           reduce using rule 31 (statement -> returns unload_pv ; .)
    TRUE            reduce using rule 31 (statement -> returns unload_pv ; .)
    }               reduce using rule 31 (statement -> returns unload_pv ; .)


state 132

    (45) loop -> WHILE store_jump ( . expr ) store_gotof { statement } end_loop
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 155
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 133

    (44) input -> INPUT ( ID . store_oper ) ;
    (100) store_oper -> .
    )               reduce using rule 100 (store_oper -> .)

    store_oper                     shift and go to state 156

state 134

    (37) var_assign -> ID store_oper = . expr ;
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 157
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 135

    (85) idarray -> ID store_oper [ . arexp ]
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    arexp                          shift and go to state 158
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 136

    (80) callfunc -> ID verify_func add_fstack . ( callfuncpar ver_params ) end_fstack store_gosub
    (               shift and go to state 159


state 137

    (41) output -> OUTPUT ( expr . outex ) ;
    (42) outex -> .
    (43) outex -> . , expr outex
    )               reduce using rule 42 (outex -> .)
    ,               shift and go to state 161

    outex                          shift and go to state 160

state 138

    (39) ifelse -> IF ( expr . ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> IF ( expr . ) store_gotof { statement } store_endif
    )               shift and go to state 162


state 139

    (38) returns -> RETURN expr store_rquad .
    ;               reduce using rule 38 (returns -> RETURN expr store_rquad .)


state 140

    (69) element -> idarray store_oper .
    /               reduce using rule 69 (element -> idarray store_oper .)
    *               reduce using rule 69 (element -> idarray store_oper .)
    -               reduce using rule 69 (element -> idarray store_oper .)
    +               reduce using rule 69 (element -> idarray store_oper .)
    OR              reduce using rule 69 (element -> idarray store_oper .)
    EQEQ            reduce using rule 69 (element -> idarray store_oper .)
    DIFF            reduce using rule 69 (element -> idarray store_oper .)
    AND             reduce using rule 69 (element -> idarray store_oper .)
    <               reduce using rule 69 (element -> idarray store_oper .)
    LOETHAN         reduce using rule 69 (element -> idarray store_oper .)
    >               reduce using rule 69 (element -> idarray store_oper .)
    GOETHAN         reduce using rule 69 (element -> idarray store_oper .)
    ;               reduce using rule 69 (element -> idarray store_oper .)
    )               reduce using rule 69 (element -> idarray store_oper .)
    ,               reduce using rule 69 (element -> idarray store_oper .)
    ]               reduce using rule 69 (element -> idarray store_oper .)


state 141

    (85) idarray -> ID store_oper . [ arexp ]
    (74) compoundx -> ID store_oper .
    [               shift and go to state 135
    /               reduce using rule 74 (compoundx -> ID store_oper .)
    *               reduce using rule 74 (compoundx -> ID store_oper .)
    -               reduce using rule 74 (compoundx -> ID store_oper .)
    +               reduce using rule 74 (compoundx -> ID store_oper .)
    OR              reduce using rule 74 (compoundx -> ID store_oper .)
    EQEQ            reduce using rule 74 (compoundx -> ID store_oper .)
    DIFF            reduce using rule 74 (compoundx -> ID store_oper .)
    AND             reduce using rule 74 (compoundx -> ID store_oper .)
    <               reduce using rule 74 (compoundx -> ID store_oper .)
    LOETHAN         reduce using rule 74 (compoundx -> ID store_oper .)
    >               reduce using rule 74 (compoundx -> ID store_oper .)
    GOETHAN         reduce using rule 74 (compoundx -> ID store_oper .)
    ;               reduce using rule 74 (compoundx -> ID store_oper .)
    )               reduce using rule 74 (compoundx -> ID store_oper .)
    ,               reduce using rule 74 (compoundx -> ID store_oper .)
    ]               reduce using rule 74 (compoundx -> ID store_oper .)


state 142

    (48) exprx -> exprop arexp .
    ;               reduce using rule 48 (exprx -> exprop arexp .)
    )               reduce using rule 48 (exprx -> exprop arexp .)
    ,               reduce using rule 48 (exprx -> exprop arexp .)


state 143

    (36) var_assign -> idarray store_oper = . expr ;
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    idarray                        shift and go to state 103
    expr                           shift and go to state 163
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 144

    (60) arexpextra -> - term . arexpextra
    (59) arexpextra -> .
    (60) arexpextra -> . - term arexpextra
    (61) arexpextra -> . + term arexpextra
    OR              reduce using rule 59 (arexpextra -> .)
    EQEQ            reduce using rule 59 (arexpextra -> .)
    DIFF            reduce using rule 59 (arexpextra -> .)
    AND             reduce using rule 59 (arexpextra -> .)
    <               reduce using rule 59 (arexpextra -> .)
    LOETHAN         reduce using rule 59 (arexpextra -> .)
    >               reduce using rule 59 (arexpextra -> .)
    GOETHAN         reduce using rule 59 (arexpextra -> .)
    ;               reduce using rule 59 (arexpextra -> .)
    )               reduce using rule 59 (arexpextra -> .)
    ,               reduce using rule 59 (arexpextra -> .)
    ]               reduce using rule 59 (arexpextra -> .)
    -               shift and go to state 117
    +               shift and go to state 118

    arexpextra                     shift and go to state 164

state 145

    (61) arexpextra -> + term . arexpextra
    (59) arexpextra -> .
    (60) arexpextra -> . - term arexpextra
    (61) arexpextra -> . + term arexpextra
    OR              reduce using rule 59 (arexpextra -> .)
    EQEQ            reduce using rule 59 (arexpextra -> .)
    DIFF            reduce using rule 59 (arexpextra -> .)
    AND             reduce using rule 59 (arexpextra -> .)
    <               reduce using rule 59 (arexpextra -> .)
    LOETHAN         reduce using rule 59 (arexpextra -> .)
    >               reduce using rule 59 (arexpextra -> .)
    GOETHAN         reduce using rule 59 (arexpextra -> .)
    ;               reduce using rule 59 (arexpextra -> .)
    )               reduce using rule 59 (arexpextra -> .)
    ,               reduce using rule 59 (arexpextra -> .)
    ]               reduce using rule 59 (arexpextra -> .)
    -               shift and go to state 117
    +               shift and go to state 118

    arexpextra                     shift and go to state 165

state 146

    (65) termx -> / factor . termx
    (64) termx -> .
    (65) termx -> . / factor termx
    (66) termx -> . * factor termx
    -               reduce using rule 64 (termx -> .)
    +               reduce using rule 64 (termx -> .)
    OR              reduce using rule 64 (termx -> .)
    EQEQ            reduce using rule 64 (termx -> .)
    DIFF            reduce using rule 64 (termx -> .)
    AND             reduce using rule 64 (termx -> .)
    <               reduce using rule 64 (termx -> .)
    LOETHAN         reduce using rule 64 (termx -> .)
    >               reduce using rule 64 (termx -> .)
    GOETHAN         reduce using rule 64 (termx -> .)
    ;               reduce using rule 64 (termx -> .)
    )               reduce using rule 64 (termx -> .)
    ,               reduce using rule 64 (termx -> .)
    ]               reduce using rule 64 (termx -> .)
    /               shift and go to state 120
    *               shift and go to state 121

    termx                          shift and go to state 166

state 147

    (66) termx -> * factor . termx
    (64) termx -> .
    (65) termx -> . / factor termx
    (66) termx -> . * factor termx
    -               reduce using rule 64 (termx -> .)
    +               reduce using rule 64 (termx -> .)
    OR              reduce using rule 64 (termx -> .)
    EQEQ            reduce using rule 64 (termx -> .)
    DIFF            reduce using rule 64 (termx -> .)
    AND             reduce using rule 64 (termx -> .)
    <               reduce using rule 64 (termx -> .)
    LOETHAN         reduce using rule 64 (termx -> .)
    >               reduce using rule 64 (termx -> .)
    GOETHAN         reduce using rule 64 (termx -> .)
    ;               reduce using rule 64 (termx -> .)
    )               reduce using rule 64 (termx -> .)
    ,               reduce using rule 64 (termx -> .)
    ]               reduce using rule 64 (termx -> .)
    /               shift and go to state 120
    *               shift and go to state 121

    termx                          shift and go to state 167

state 148

    (8) vars -> VAR datatype varids store_type ; . vars
    (8) vars -> . VAR datatype varids store_type ; vars
    (9) vars -> .
    VAR             shift and go to state 47
    WHILE           reduce using rule 9 (vars -> .)
    INPUT           reduce using rule 9 (vars -> .)
    OUTPUT          reduce using rule 9 (vars -> .)
    IF              reduce using rule 9 (vars -> .)
    RETURN          reduce using rule 9 (vars -> .)
    ID              reduce using rule 9 (vars -> .)
    (               reduce using rule 9 (vars -> .)
    STRING          reduce using rule 9 (vars -> .)
    FLOAT           reduce using rule 9 (vars -> .)
    INT             reduce using rule 9 (vars -> .)
    FALSE           reduce using rule 9 (vars -> .)
    TRUE            reduce using rule 9 (vars -> .)
    }               reduce using rule 9 (vars -> .)

    vars                           shift and go to state 168

state 149

    (11) varids -> ID darray , . varids
    (10) varids -> . ID darray
    (11) varids -> . ID darray , varids
    ID              shift and go to state 83

    varids                         shift and go to state 169

state 150

    (14) darray -> [ INT . ] twodarray
    ]               shift and go to state 170


state 151

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } . close_func functions
    (106) close_func -> .
    VOID            reduce using rule 106 (close_func -> .)
    D_BOOL          reduce using rule 106 (close_func -> .)
    D_STRING        reduce using rule 106 (close_func -> .)
    D_FLOAT         reduce using rule 106 (close_func -> .)
    D_INT           reduce using rule 106 (close_func -> .)
    VAR             reduce using rule 106 (close_func -> .)
    FUNC            reduce using rule 106 (close_func -> .)

    close_func                     shift and go to state 171

state 152

    (35) statement -> statement statement .
    (20) funcontent -> statement . funcontent
    (35) statement -> statement . statement
    (19) funcontent -> .
    (20) funcontent -> . statement funcontent
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! reduce/reduce conflict for } resolved using rule 19 (funcontent -> .)
  ! reduce/reduce conflict for WHILE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for INPUT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for ( resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for STRING resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for INT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for } resolved using rule 19 (funcontent -> .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 19 (funcontent -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    statement                      shift and go to state 152
    funcontent                     shift and go to state 153
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 153

    (20) funcontent -> statement funcontent .
    }               reduce using rule 20 (funcontent -> statement funcontent .)


state 154

    (68) factor -> ( store_op expr ) . store_op
    (99) store_op -> .
    /               reduce using rule 99 (store_op -> .)
    *               reduce using rule 99 (store_op -> .)
    -               reduce using rule 99 (store_op -> .)
    +               reduce using rule 99 (store_op -> .)
    OR              reduce using rule 99 (store_op -> .)
    EQEQ            reduce using rule 99 (store_op -> .)
    DIFF            reduce using rule 99 (store_op -> .)
    AND             reduce using rule 99 (store_op -> .)
    <               reduce using rule 99 (store_op -> .)
    LOETHAN         reduce using rule 99 (store_op -> .)
    >               reduce using rule 99 (store_op -> .)
    GOETHAN         reduce using rule 99 (store_op -> .)
    ;               reduce using rule 99 (store_op -> .)
    )               reduce using rule 99 (store_op -> .)
    ,               reduce using rule 99 (store_op -> .)
    ]               reduce using rule 99 (store_op -> .)

    store_op                       shift and go to state 172

state 155

    (45) loop -> WHILE store_jump ( expr . ) store_gotof { statement } end_loop
    )               shift and go to state 173


state 156

    (44) input -> INPUT ( ID store_oper . ) ;
    )               shift and go to state 174


state 157

    (37) var_assign -> ID store_oper = expr . ;
    ;               shift and go to state 175


state 158

    (85) idarray -> ID store_oper [ arexp . ]
    ]               shift and go to state 176


state 159

    (80) callfunc -> ID verify_func add_fstack ( . callfuncpar ver_params ) end_fstack store_gosub
    (81) callfuncpar -> .
    (82) callfuncpar -> . expr store_pquad callfuncparx
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    )               reduce using rule 81 (callfuncpar -> .)
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    callfuncpar                    shift and go to state 177
    expr                           shift and go to state 178
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 160

    (41) output -> OUTPUT ( expr outex . ) ;
    )               shift and go to state 179


state 161

    (43) outex -> , . expr outex
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 180
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 162

    (39) ifelse -> IF ( expr ) . store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> IF ( expr ) . store_gotof { statement } store_endif
    (114) store_gotof -> .
    {               reduce using rule 114 (store_gotof -> .)

    store_gotof                    shift and go to state 181

state 163

    (36) var_assign -> idarray store_oper = expr . ;
    ;               shift and go to state 182


state 164

    (60) arexpextra -> - term arexpextra .
    OR              reduce using rule 60 (arexpextra -> - term arexpextra .)
    EQEQ            reduce using rule 60 (arexpextra -> - term arexpextra .)
    DIFF            reduce using rule 60 (arexpextra -> - term arexpextra .)
    AND             reduce using rule 60 (arexpextra -> - term arexpextra .)
    <               reduce using rule 60 (arexpextra -> - term arexpextra .)
    LOETHAN         reduce using rule 60 (arexpextra -> - term arexpextra .)
    >               reduce using rule 60 (arexpextra -> - term arexpextra .)
    GOETHAN         reduce using rule 60 (arexpextra -> - term arexpextra .)
    ;               reduce using rule 60 (arexpextra -> - term arexpextra .)
    )               reduce using rule 60 (arexpextra -> - term arexpextra .)
    ,               reduce using rule 60 (arexpextra -> - term arexpextra .)
    ]               reduce using rule 60 (arexpextra -> - term arexpextra .)


state 165

    (61) arexpextra -> + term arexpextra .
    OR              reduce using rule 61 (arexpextra -> + term arexpextra .)
    EQEQ            reduce using rule 61 (arexpextra -> + term arexpextra .)
    DIFF            reduce using rule 61 (arexpextra -> + term arexpextra .)
    AND             reduce using rule 61 (arexpextra -> + term arexpextra .)
    <               reduce using rule 61 (arexpextra -> + term arexpextra .)
    LOETHAN         reduce using rule 61 (arexpextra -> + term arexpextra .)
    >               reduce using rule 61 (arexpextra -> + term arexpextra .)
    GOETHAN         reduce using rule 61 (arexpextra -> + term arexpextra .)
    ;               reduce using rule 61 (arexpextra -> + term arexpextra .)
    )               reduce using rule 61 (arexpextra -> + term arexpextra .)
    ,               reduce using rule 61 (arexpextra -> + term arexpextra .)
    ]               reduce using rule 61 (arexpextra -> + term arexpextra .)


state 166

    (65) termx -> / factor termx .
    -               reduce using rule 65 (termx -> / factor termx .)
    +               reduce using rule 65 (termx -> / factor termx .)
    OR              reduce using rule 65 (termx -> / factor termx .)
    EQEQ            reduce using rule 65 (termx -> / factor termx .)
    DIFF            reduce using rule 65 (termx -> / factor termx .)
    AND             reduce using rule 65 (termx -> / factor termx .)
    <               reduce using rule 65 (termx -> / factor termx .)
    LOETHAN         reduce using rule 65 (termx -> / factor termx .)
    >               reduce using rule 65 (termx -> / factor termx .)
    GOETHAN         reduce using rule 65 (termx -> / factor termx .)
    ;               reduce using rule 65 (termx -> / factor termx .)
    )               reduce using rule 65 (termx -> / factor termx .)
    ,               reduce using rule 65 (termx -> / factor termx .)
    ]               reduce using rule 65 (termx -> / factor termx .)


state 167

    (66) termx -> * factor termx .
    -               reduce using rule 66 (termx -> * factor termx .)
    +               reduce using rule 66 (termx -> * factor termx .)
    OR              reduce using rule 66 (termx -> * factor termx .)
    EQEQ            reduce using rule 66 (termx -> * factor termx .)
    DIFF            reduce using rule 66 (termx -> * factor termx .)
    AND             reduce using rule 66 (termx -> * factor termx .)
    <               reduce using rule 66 (termx -> * factor termx .)
    LOETHAN         reduce using rule 66 (termx -> * factor termx .)
    >               reduce using rule 66 (termx -> * factor termx .)
    GOETHAN         reduce using rule 66 (termx -> * factor termx .)
    ;               reduce using rule 66 (termx -> * factor termx .)
    )               reduce using rule 66 (termx -> * factor termx .)
    ,               reduce using rule 66 (termx -> * factor termx .)
    ]               reduce using rule 66 (termx -> * factor termx .)


state 168

    (8) vars -> VAR datatype varids store_type ; vars .
    WHILE           reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    INPUT           reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    OUTPUT          reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    IF              reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    RETURN          reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    ID              reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    (               reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    STRING          reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    FLOAT           reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    INT             reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    FALSE           reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    TRUE            reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)
    }               reduce using rule 8 (vars -> VAR datatype varids store_type ; vars .)


state 169

    (11) varids -> ID darray , varids .
    ;               reduce using rule 11 (varids -> ID darray , varids .)


state 170

    (14) darray -> [ INT ] . twodarray
    (15) twodarray -> .
    (16) twodarray -> . [ INT ]
    ,               reduce using rule 15 (twodarray -> .)
    ;               reduce using rule 15 (twodarray -> .)
    [               shift and go to state 183

    twodarray                      shift and go to state 184

state 171

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func . functions
    (17) functions -> . datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions
    (18) functions -> .
    (87) datatype -> . VOID
    (88) datatype -> . D_BOOL
    (89) datatype -> . D_STRING
    (90) datatype -> . D_FLOAT
    (91) datatype -> . D_INT
    VAR             reduce using rule 18 (functions -> .)
    FUNC            reduce using rule 18 (functions -> .)
    VOID            shift and go to state 10
    D_BOOL          shift and go to state 11
    D_STRING        shift and go to state 12
    D_FLOAT         shift and go to state 13
    D_INT           shift and go to state 14

    datatype                       shift and go to state 16
    functions                      shift and go to state 185

state 172

    (68) factor -> ( store_op expr ) store_op .
    /               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    *               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    -               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    +               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    OR              reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    EQEQ            reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    DIFF            reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    AND             reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    <               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    LOETHAN         reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    >               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    GOETHAN         reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    ;               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    )               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    ,               reduce using rule 68 (factor -> ( store_op expr ) store_op .)
    ]               reduce using rule 68 (factor -> ( store_op expr ) store_op .)


state 173

    (45) loop -> WHILE store_jump ( expr ) . store_gotof { statement } end_loop
    (114) store_gotof -> .
    {               reduce using rule 114 (store_gotof -> .)

    store_gotof                    shift and go to state 186

state 174

    (44) input -> INPUT ( ID store_oper ) . ;
    ;               shift and go to state 187


state 175

    (37) var_assign -> ID store_oper = expr ; .
    WHILE           reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    INPUT           reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    OUTPUT          reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    IF              reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    RETURN          reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    ID              reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    (               reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    STRING          reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    FLOAT           reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    INT             reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    FALSE           reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    TRUE            reduce using rule 37 (var_assign -> ID store_oper = expr ; .)
    }               reduce using rule 37 (var_assign -> ID store_oper = expr ; .)


state 176

    (85) idarray -> ID store_oper [ arexp ] .
    =               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    /               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    *               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    -               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    +               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    OR              reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    EQEQ            reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    DIFF            reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    AND             reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    <               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    LOETHAN         reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    >               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    GOETHAN         reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    ;               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    )               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    ,               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)
    ]               reduce using rule 85 (idarray -> ID store_oper [ arexp ] .)


state 177

    (80) callfunc -> ID verify_func add_fstack ( callfuncpar . ver_params ) end_fstack store_gosub
    (109) ver_params -> .
    )               reduce using rule 109 (ver_params -> .)

    ver_params                     shift and go to state 188

state 178

    (82) callfuncpar -> expr . store_pquad callfuncparx
    (108) store_pquad -> .
    ,               reduce using rule 108 (store_pquad -> .)
    )               reduce using rule 108 (store_pquad -> .)

    store_pquad                    shift and go to state 189

state 179

    (41) output -> OUTPUT ( expr outex ) . ;
    ;               shift and go to state 190


state 180

    (43) outex -> , expr . outex
    (42) outex -> .
    (43) outex -> . , expr outex
    )               reduce using rule 42 (outex -> .)
    ,               shift and go to state 161

    outex                          shift and go to state 191

state 181

    (39) ifelse -> IF ( expr ) store_gotof . { statement } ELSE store_endif { statement }
    (40) ifelse -> IF ( expr ) store_gotof . { statement } store_endif
    {               shift and go to state 192


state 182

    (36) var_assign -> idarray store_oper = expr ; .
    WHILE           reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    INPUT           reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    OUTPUT          reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    IF              reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    RETURN          reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    ID              reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    (               reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    STRING          reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    FLOAT           reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    INT             reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    FALSE           reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    TRUE            reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)
    }               reduce using rule 36 (var_assign -> idarray store_oper = expr ; .)


state 183

    (16) twodarray -> [ . INT ]
    INT             shift and go to state 193


state 184

    (14) darray -> [ INT ] twodarray .
    ,               reduce using rule 14 (darray -> [ INT ] twodarray .)
    ;               reduce using rule 14 (darray -> [ INT ] twodarray .)


state 185

    (17) functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions .
    VAR             reduce using rule 17 (functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions .)
    FUNC            reduce using rule 17 (functions -> datatype FUNC ID ( params ) store_funcv store_params store_init_quad { vars store_local_vars funcontent } close_func functions .)


state 186

    (45) loop -> WHILE store_jump ( expr ) store_gotof . { statement } end_loop
    {               shift and go to state 194


state 187

    (44) input -> INPUT ( ID store_oper ) ; .
    WHILE           reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    INPUT           reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    OUTPUT          reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    IF              reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    RETURN          reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    ID              reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    (               reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    STRING          reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    FLOAT           reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    INT             reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    FALSE           reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    TRUE            reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)
    }               reduce using rule 44 (input -> INPUT ( ID store_oper ) ; .)


state 188

    (80) callfunc -> ID verify_func add_fstack ( callfuncpar ver_params . ) end_fstack store_gosub
    )               shift and go to state 195


state 189

    (82) callfuncpar -> expr store_pquad . callfuncparx
    (83) callfuncparx -> .
    (84) callfuncparx -> . , callfuncpar
    )               reduce using rule 83 (callfuncparx -> .)
    ,               shift and go to state 197

    callfuncparx                   shift and go to state 196

state 190

    (41) output -> OUTPUT ( expr outex ) ; .
    WHILE           reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    INPUT           reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    OUTPUT          reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    IF              reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    RETURN          reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    ID              reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    (               reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    STRING          reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    FLOAT           reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    INT             reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    FALSE           reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    TRUE            reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)
    }               reduce using rule 41 (output -> OUTPUT ( expr outex ) ; .)


state 191

    (43) outex -> , expr outex .
    )               reduce using rule 43 (outex -> , expr outex .)


state 192

    (39) ifelse -> IF ( expr ) store_gotof { . statement } ELSE store_endif { statement }
    (40) ifelse -> IF ( expr ) store_gotof { . statement } store_endif
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 34 (statement -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 60
    statement                      shift and go to state 198
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 193

    (16) twodarray -> [ INT . ]
    ]               shift and go to state 199


state 194

    (45) loop -> WHILE store_jump ( expr ) store_gotof { . statement } end_loop
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 34 (statement -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 60
    statement                      shift and go to state 200
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 195

    (80) callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) . end_fstack store_gosub
    (112) end_fstack -> .
    /               reduce using rule 112 (end_fstack -> .)
    *               reduce using rule 112 (end_fstack -> .)
    -               reduce using rule 112 (end_fstack -> .)
    +               reduce using rule 112 (end_fstack -> .)
    OR              reduce using rule 112 (end_fstack -> .)
    EQEQ            reduce using rule 112 (end_fstack -> .)
    DIFF            reduce using rule 112 (end_fstack -> .)
    AND             reduce using rule 112 (end_fstack -> .)
    <               reduce using rule 112 (end_fstack -> .)
    LOETHAN         reduce using rule 112 (end_fstack -> .)
    >               reduce using rule 112 (end_fstack -> .)
    GOETHAN         reduce using rule 112 (end_fstack -> .)
    ;               reduce using rule 112 (end_fstack -> .)
    )               reduce using rule 112 (end_fstack -> .)
    ,               reduce using rule 112 (end_fstack -> .)
    ]               reduce using rule 112 (end_fstack -> .)

    end_fstack                     shift and go to state 201

state 196

    (82) callfuncpar -> expr store_pquad callfuncparx .
    )               reduce using rule 82 (callfuncpar -> expr store_pquad callfuncparx .)


state 197

    (84) callfuncparx -> , . callfuncpar
    (81) callfuncpar -> .
    (82) callfuncpar -> . expr store_pquad callfuncparx
    (46) expr -> . arexp exprx
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (85) idarray -> . ID store_oper [ arexp ]
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
    )               reduce using rule 81 (callfuncpar -> .)
    (               shift and go to state 52
    ID              shift and go to state 104
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    callfuncpar                    shift and go to state 202
    expr                           shift and go to state 178
    arexp                          shift and go to state 68
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    idarray                        shift and go to state 103
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 198

    (39) ifelse -> IF ( expr ) store_gotof { statement . } ELSE store_endif { statement }
    (40) ifelse -> IF ( expr ) store_gotof { statement . } store_endif
    (35) statement -> statement . statement
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               shift and go to state 204
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 60
    statement                      shift and go to state 203
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 199

    (16) twodarray -> [ INT ] .
    ,               reduce using rule 16 (twodarray -> [ INT ] .)
    ;               reduce using rule 16 (twodarray -> [ INT ] .)


state 200

    (45) loop -> WHILE store_jump ( expr ) store_gotof { statement . } end_loop
    (35) statement -> statement . statement
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               shift and go to state 205
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 60
    statement                      shift and go to state 203
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 201

    (80) callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack . store_gosub
    (113) store_gosub -> .
    /               reduce using rule 113 (store_gosub -> .)
    *               reduce using rule 113 (store_gosub -> .)
    -               reduce using rule 113 (store_gosub -> .)
    +               reduce using rule 113 (store_gosub -> .)
    OR              reduce using rule 113 (store_gosub -> .)
    EQEQ            reduce using rule 113 (store_gosub -> .)
    DIFF            reduce using rule 113 (store_gosub -> .)
    AND             reduce using rule 113 (store_gosub -> .)
    <               reduce using rule 113 (store_gosub -> .)
    LOETHAN         reduce using rule 113 (store_gosub -> .)
    >               reduce using rule 113 (store_gosub -> .)
    GOETHAN         reduce using rule 113 (store_gosub -> .)
    ;               reduce using rule 113 (store_gosub -> .)
    )               reduce using rule 113 (store_gosub -> .)
    ,               reduce using rule 113 (store_gosub -> .)
    ]               reduce using rule 113 (store_gosub -> .)

    store_gosub                    shift and go to state 206

state 202

    (84) callfuncparx -> , callfuncpar .
    )               reduce using rule 84 (callfuncparx -> , callfuncpar .)


state 203

    (35) statement -> statement statement .
    (35) statement -> statement . statement
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! reduce/reduce conflict for WHILE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for INPUT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for OUTPUT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for IF resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for ID resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for ( resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for STRING resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for INT resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 35 (statement -> statement statement .)
  ! reduce/reduce conflict for } resolved using rule 35 (statement -> statement statement .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 35 (statement -> statement statement .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    statement                      shift and go to state 203
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    expr                           shift and go to state 60
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 204

    (39) ifelse -> IF ( expr ) store_gotof { statement } . ELSE store_endif { statement }
    (40) ifelse -> IF ( expr ) store_gotof { statement } . store_endif
    (107) store_endif -> .
    ELSE            shift and go to state 207
    WHILE           reduce using rule 107 (store_endif -> .)
    INPUT           reduce using rule 107 (store_endif -> .)
    OUTPUT          reduce using rule 107 (store_endif -> .)
    IF              reduce using rule 107 (store_endif -> .)
    RETURN          reduce using rule 107 (store_endif -> .)
    ID              reduce using rule 107 (store_endif -> .)
    (               reduce using rule 107 (store_endif -> .)
    STRING          reduce using rule 107 (store_endif -> .)
    FLOAT           reduce using rule 107 (store_endif -> .)
    INT             reduce using rule 107 (store_endif -> .)
    FALSE           reduce using rule 107 (store_endif -> .)
    TRUE            reduce using rule 107 (store_endif -> .)
    }               reduce using rule 107 (store_endif -> .)

    store_endif                    shift and go to state 208

state 205

    (45) loop -> WHILE store_jump ( expr ) store_gotof { statement } . end_loop
    (116) end_loop -> .
    WHILE           reduce using rule 116 (end_loop -> .)
    INPUT           reduce using rule 116 (end_loop -> .)
    OUTPUT          reduce using rule 116 (end_loop -> .)
    IF              reduce using rule 116 (end_loop -> .)
    RETURN          reduce using rule 116 (end_loop -> .)
    ID              reduce using rule 116 (end_loop -> .)
    (               reduce using rule 116 (end_loop -> .)
    STRING          reduce using rule 116 (end_loop -> .)
    FLOAT           reduce using rule 116 (end_loop -> .)
    INT             reduce using rule 116 (end_loop -> .)
    FALSE           reduce using rule 116 (end_loop -> .)
    TRUE            reduce using rule 116 (end_loop -> .)
    }               reduce using rule 116 (end_loop -> .)

    end_loop                       shift and go to state 209

state 206

    (80) callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .
    /               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    *               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    -               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    +               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    OR              reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    EQEQ            reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    DIFF            reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    AND             reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    <               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    LOETHAN         reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    >               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    GOETHAN         reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    ;               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    )               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    ,               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)
    ]               reduce using rule 80 (callfunc -> ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub .)


state 207

    (39) ifelse -> IF ( expr ) store_gotof { statement } ELSE . store_endif { statement }
    (107) store_endif -> .
    {               reduce using rule 107 (store_endif -> .)

    store_endif                    shift and go to state 210

state 208

    (40) ifelse -> IF ( expr ) store_gotof { statement } store_endif .
    WHILE           reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    INPUT           reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    OUTPUT          reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    IF              reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    RETURN          reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    ID              reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    (               reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    STRING          reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    FLOAT           reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    INT             reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    FALSE           reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    TRUE            reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)
    }               reduce using rule 40 (ifelse -> IF ( expr ) store_gotof { statement } store_endif .)


state 209

    (45) loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .
    WHILE           reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    INPUT           reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    OUTPUT          reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    IF              reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    RETURN          reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    ID              reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    (               reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    STRING          reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    FLOAT           reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    INT             reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    FALSE           reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    TRUE            reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)
    }               reduce using rule 45 (loop -> WHILE store_jump ( expr ) store_gotof { statement } end_loop .)


state 210

    (39) ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif . { statement }
    {               shift and go to state 211


state 211

    (39) ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { . statement }
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               reduce using rule 34 (statement -> .)
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 60
    statement                      shift and go to state 212
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 212

    (39) ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement . }
    (35) statement -> statement . statement
    (27) statement -> . loop unload_pv
    (28) statement -> . input unload_pv
    (29) statement -> . output unload_pv
    (30) statement -> . ifelse unload_pv
    (31) statement -> . returns unload_pv ;
    (32) statement -> . expr ;
    (33) statement -> . var_assign unload_pv
    (34) statement -> .
    (35) statement -> . statement statement
    (45) loop -> . WHILE store_jump ( expr ) store_gotof { statement } end_loop
    (44) input -> . INPUT ( ID store_oper ) ;
    (41) output -> . OUTPUT ( expr outex ) ;
    (39) ifelse -> . IF ( expr ) store_gotof { statement } ELSE store_endif { statement }
    (40) ifelse -> . IF ( expr ) store_gotof { statement } store_endif
    (38) returns -> . RETURN expr store_rquad
    (46) expr -> . arexp exprx
    (36) var_assign -> . idarray store_oper = expr ;
    (37) var_assign -> . ID store_oper = expr ;
    (57) arexp -> . term arexpextra
    (58) arexp -> . term
    (85) idarray -> . ID store_oper [ arexp ]
    (62) term -> . factor termx
    (63) term -> . factor
    (67) factor -> . element
    (68) factor -> . ( store_op expr ) store_op
    (69) element -> . idarray store_oper
    (70) element -> . callfunc store_oper
    (71) element -> . compound store_oper
    (72) element -> . const store_const
    (80) callfunc -> . ID verify_func add_fstack ( callfuncpar ver_params ) end_fstack store_gosub
    (73) compound -> . compoundx
    (75) const -> . STRING
    (76) const -> . FLOAT
    (77) const -> . INT
    (78) const -> . FALSE
    (79) const -> . TRUE
    (74) compoundx -> . ID store_oper
  ! shift/reduce conflict for } resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INPUT resolved as shift
  ! shift/reduce conflict for OUTPUT resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
    }               shift and go to state 213
    WHILE           shift and go to state 62
    INPUT           shift and go to state 63
    OUTPUT          shift and go to state 65
    IF              shift and go to state 66
    RETURN          shift and go to state 67
    ID              shift and go to state 64
    (               shift and go to state 52
    STRING          shift and go to state 77
    FLOAT           shift and go to state 78
    INT             shift and go to state 79
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81

    expr                           shift and go to state 60
    statement                      shift and go to state 203
    loop                           shift and go to state 55
    input                          shift and go to state 56
    output                         shift and go to state 57
    ifelse                         shift and go to state 58
    returns                        shift and go to state 59
    var_assign                     shift and go to state 61
    arexp                          shift and go to state 68
    idarray                        shift and go to state 69
    term                           shift and go to state 70
    factor                         shift and go to state 71
    element                        shift and go to state 72
    callfunc                       shift and go to state 73
    compound                       shift and go to state 74
    const                          shift and go to state 75
    compoundx                      shift and go to state 76

state 213

    (39) ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .
    WHILE           reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    INPUT           reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    OUTPUT          reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    IF              reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    RETURN          reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    ID              reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    (               reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    STRING          reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    FLOAT           reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    INT             reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    FALSE           reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    TRUE            reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)
    }               reduce using rule 39 (ifelse -> IF ( expr ) store_gotof { statement } ELSE store_endif { statement } .)


Conflicts:

shift/reduce conflict for VAR in state 5 resolved as shift
shift/reduce conflict for VAR in state 25 resolved as shift
shift/reduce conflict for WHILE in state 49 resolved as shift
shift/reduce conflict for INPUT in state 49 resolved as shift
shift/reduce conflict for OUTPUT in state 49 resolved as shift
shift/reduce conflict for IF in state 49 resolved as shift
shift/reduce conflict for RETURN in state 49 resolved as shift
shift/reduce conflict for ID in state 49 resolved as shift
shift/reduce conflict for ( in state 49 resolved as shift
shift/reduce conflict for STRING in state 49 resolved as shift
shift/reduce conflict for FLOAT in state 49 resolved as shift
shift/reduce conflict for INT in state 49 resolved as shift
shift/reduce conflict for FALSE in state 49 resolved as shift
shift/reduce conflict for TRUE in state 49 resolved as shift
shift/reduce conflict for WHILE in state 54 resolved as shift
shift/reduce conflict for INPUT in state 54 resolved as shift
shift/reduce conflict for OUTPUT in state 54 resolved as shift
shift/reduce conflict for IF in state 54 resolved as shift
shift/reduce conflict for RETURN in state 54 resolved as shift
shift/reduce conflict for ID in state 54 resolved as shift
shift/reduce conflict for ( in state 54 resolved as shift
shift/reduce conflict for STRING in state 54 resolved as shift
shift/reduce conflict for FLOAT in state 54 resolved as shift
shift/reduce conflict for INT in state 54 resolved as shift
shift/reduce conflict for FALSE in state 54 resolved as shift
shift/reduce conflict for TRUE in state 54 resolved as shift
shift/reduce conflict for WHILE in state 84 resolved as shift
shift/reduce conflict for INPUT in state 84 resolved as shift
shift/reduce conflict for OUTPUT in state 84 resolved as shift
shift/reduce conflict for IF in state 84 resolved as shift
shift/reduce conflict for RETURN in state 84 resolved as shift
shift/reduce conflict for ID in state 84 resolved as shift
shift/reduce conflict for ( in state 84 resolved as shift
shift/reduce conflict for STRING in state 84 resolved as shift
shift/reduce conflict for FLOAT in state 84 resolved as shift
shift/reduce conflict for INT in state 84 resolved as shift
shift/reduce conflict for FALSE in state 84 resolved as shift
shift/reduce conflict for TRUE in state 84 resolved as shift
shift/reduce conflict for WHILE in state 87 resolved as shift
shift/reduce conflict for INPUT in state 87 resolved as shift
shift/reduce conflict for OUTPUT in state 87 resolved as shift
shift/reduce conflict for IF in state 87 resolved as shift
shift/reduce conflict for RETURN in state 87 resolved as shift
shift/reduce conflict for ID in state 87 resolved as shift
shift/reduce conflict for ( in state 87 resolved as shift
shift/reduce conflict for STRING in state 87 resolved as shift
shift/reduce conflict for FLOAT in state 87 resolved as shift
shift/reduce conflict for INT in state 87 resolved as shift
shift/reduce conflict for FALSE in state 87 resolved as shift
shift/reduce conflict for TRUE in state 87 resolved as shift
shift/reduce conflict for WHILE in state 129 resolved as shift
shift/reduce conflict for INPUT in state 129 resolved as shift
shift/reduce conflict for OUTPUT in state 129 resolved as shift
shift/reduce conflict for IF in state 129 resolved as shift
shift/reduce conflict for RETURN in state 129 resolved as shift
shift/reduce conflict for ID in state 129 resolved as shift
shift/reduce conflict for ( in state 129 resolved as shift
shift/reduce conflict for STRING in state 129 resolved as shift
shift/reduce conflict for FLOAT in state 129 resolved as shift
shift/reduce conflict for INT in state 129 resolved as shift
shift/reduce conflict for FALSE in state 129 resolved as shift
shift/reduce conflict for TRUE in state 129 resolved as shift
shift/reduce conflict for WHILE in state 152 resolved as shift
shift/reduce conflict for INPUT in state 152 resolved as shift
shift/reduce conflict for OUTPUT in state 152 resolved as shift
shift/reduce conflict for IF in state 152 resolved as shift
shift/reduce conflict for RETURN in state 152 resolved as shift
shift/reduce conflict for ID in state 152 resolved as shift
shift/reduce conflict for ( in state 152 resolved as shift
shift/reduce conflict for STRING in state 152 resolved as shift
shift/reduce conflict for FLOAT in state 152 resolved as shift
shift/reduce conflict for INT in state 152 resolved as shift
shift/reduce conflict for FALSE in state 152 resolved as shift
shift/reduce conflict for TRUE in state 152 resolved as shift
shift/reduce conflict for WHILE in state 192 resolved as shift
shift/reduce conflict for INPUT in state 192 resolved as shift
shift/reduce conflict for OUTPUT in state 192 resolved as shift
shift/reduce conflict for IF in state 192 resolved as shift
shift/reduce conflict for RETURN in state 192 resolved as shift
shift/reduce conflict for ID in state 192 resolved as shift
shift/reduce conflict for ( in state 192 resolved as shift
shift/reduce conflict for STRING in state 192 resolved as shift
shift/reduce conflict for FLOAT in state 192 resolved as shift
shift/reduce conflict for INT in state 192 resolved as shift
shift/reduce conflict for FALSE in state 192 resolved as shift
shift/reduce conflict for TRUE in state 192 resolved as shift
shift/reduce conflict for WHILE in state 194 resolved as shift
shift/reduce conflict for INPUT in state 194 resolved as shift
shift/reduce conflict for OUTPUT in state 194 resolved as shift
shift/reduce conflict for IF in state 194 resolved as shift
shift/reduce conflict for RETURN in state 194 resolved as shift
shift/reduce conflict for ID in state 194 resolved as shift
shift/reduce conflict for ( in state 194 resolved as shift
shift/reduce conflict for STRING in state 194 resolved as shift
shift/reduce conflict for FLOAT in state 194 resolved as shift
shift/reduce conflict for INT in state 194 resolved as shift
shift/reduce conflict for FALSE in state 194 resolved as shift
shift/reduce conflict for TRUE in state 194 resolved as shift
shift/reduce conflict for } in state 198 resolved as shift
shift/reduce conflict for WHILE in state 198 resolved as shift
shift/reduce conflict for INPUT in state 198 resolved as shift
shift/reduce conflict for OUTPUT in state 198 resolved as shift
shift/reduce conflict for IF in state 198 resolved as shift
shift/reduce conflict for RETURN in state 198 resolved as shift
shift/reduce conflict for ID in state 198 resolved as shift
shift/reduce conflict for ( in state 198 resolved as shift
shift/reduce conflict for STRING in state 198 resolved as shift
shift/reduce conflict for FLOAT in state 198 resolved as shift
shift/reduce conflict for INT in state 198 resolved as shift
shift/reduce conflict for FALSE in state 198 resolved as shift
shift/reduce conflict for TRUE in state 198 resolved as shift
shift/reduce conflict for } in state 200 resolved as shift
shift/reduce conflict for WHILE in state 200 resolved as shift
shift/reduce conflict for INPUT in state 200 resolved as shift
shift/reduce conflict for OUTPUT in state 200 resolved as shift
shift/reduce conflict for IF in state 200 resolved as shift
shift/reduce conflict for RETURN in state 200 resolved as shift
shift/reduce conflict for ID in state 200 resolved as shift
shift/reduce conflict for ( in state 200 resolved as shift
shift/reduce conflict for STRING in state 200 resolved as shift
shift/reduce conflict for FLOAT in state 200 resolved as shift
shift/reduce conflict for INT in state 200 resolved as shift
shift/reduce conflict for FALSE in state 200 resolved as shift
shift/reduce conflict for TRUE in state 200 resolved as shift
shift/reduce conflict for WHILE in state 203 resolved as shift
shift/reduce conflict for INPUT in state 203 resolved as shift
shift/reduce conflict for OUTPUT in state 203 resolved as shift
shift/reduce conflict for IF in state 203 resolved as shift
shift/reduce conflict for RETURN in state 203 resolved as shift
shift/reduce conflict for ID in state 203 resolved as shift
shift/reduce conflict for ( in state 203 resolved as shift
shift/reduce conflict for STRING in state 203 resolved as shift
shift/reduce conflict for FLOAT in state 203 resolved as shift
shift/reduce conflict for INT in state 203 resolved as shift
shift/reduce conflict for FALSE in state 203 resolved as shift
shift/reduce conflict for TRUE in state 203 resolved as shift
shift/reduce conflict for WHILE in state 211 resolved as shift
shift/reduce conflict for INPUT in state 211 resolved as shift
shift/reduce conflict for OUTPUT in state 211 resolved as shift
shift/reduce conflict for IF in state 211 resolved as shift
shift/reduce conflict for RETURN in state 211 resolved as shift
shift/reduce conflict for ID in state 211 resolved as shift
shift/reduce conflict for ( in state 211 resolved as shift
shift/reduce conflict for STRING in state 211 resolved as shift
shift/reduce conflict for FLOAT in state 211 resolved as shift
shift/reduce conflict for INT in state 211 resolved as shift
shift/reduce conflict for FALSE in state 211 resolved as shift
shift/reduce conflict for TRUE in state 211 resolved as shift
shift/reduce conflict for } in state 212 resolved as shift
shift/reduce conflict for WHILE in state 212 resolved as shift
shift/reduce conflict for INPUT in state 212 resolved as shift
shift/reduce conflict for OUTPUT in state 212 resolved as shift
shift/reduce conflict for IF in state 212 resolved as shift
shift/reduce conflict for RETURN in state 212 resolved as shift
shift/reduce conflict for ID in state 212 resolved as shift
shift/reduce conflict for ( in state 212 resolved as shift
shift/reduce conflict for STRING in state 212 resolved as shift
shift/reduce conflict for FLOAT in state 212 resolved as shift
shift/reduce conflict for INT in state 212 resolved as shift
shift/reduce conflict for FALSE in state 212 resolved as shift
shift/reduce conflict for TRUE in state 212 resolved as shift
reduce/reduce conflict in state 49 resolved using rule maincontent -> <empty>
rejected rule (statement -> <empty>) in state 49
reduce/reduce conflict in state 54 resolved using rule maincontent -> <empty>
rejected rule (statement -> <empty>) in state 54
reduce/reduce conflict in state 70 resolved using rule arexp -> term
rejected rule (arexpextra -> <empty>) in state 70
reduce/reduce conflict in state 71 resolved using rule term -> factor
rejected rule (termx -> <empty>) in state 71
reduce/reduce conflict in state 84 resolved using rule funcontent -> <empty>
rejected rule (statement -> <empty>) in state 84
reduce/reduce conflict in state 87 resolved using rule maincontent -> <empty>
rejected rule (statement -> statement statement) in state 87
reduce/reduce conflict in state 87 resolved using rule statement -> statement statement
rejected rule (statement -> <empty>) in state 87
reduce/reduce conflict in state 87 resolved using rule maincontent -> <empty>
rejected rule (statement -> <empty>) in state 87
reduce/reduce conflict in state 129 resolved using rule funcontent -> <empty>
rejected rule (statement -> <empty>) in state 129
reduce/reduce conflict in state 152 resolved using rule funcontent -> <empty>
rejected rule (statement -> statement statement) in state 152
reduce/reduce conflict in state 152 resolved using rule statement -> statement statement
rejected rule (statement -> <empty>) in state 152
reduce/reduce conflict in state 152 resolved using rule funcontent -> <empty>
rejected rule (statement -> <empty>) in state 152
reduce/reduce conflict in state 203 resolved using rule statement -> statement statement
rejected rule (statement -> <empty>) in state 203